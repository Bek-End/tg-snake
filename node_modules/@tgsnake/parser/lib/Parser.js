"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2021 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var Entities_1 = require("./Entities");
var markdown_1 = require("./markdown");
var html_1 = require("./html");
var ParserError_1 = __importDefault(require("./ParserError"));
var big_integer_1 = __importDefault(require("big-integer"));
var Parser = /** @class */ (function () {
    function Parser(api) {
        this.raw = api;
    }
    /**
     * Extract entities from text.
     * @param {String} text - input text.
     * @param {String} parseMode - parseMode
     */
    Parser.prototype.parse = function (text, parseMode) {
        try {
            if (text === "") {
                return [text, []];
            }
            if (parseMode === "markdown") {
                return (0, markdown_1.parse)(text);
            }
            if (parseMode === "html") {
                return (0, html_1.parse)(text);
            }
            return [text, []];
        }
        catch (error) {
            throw new ParserError_1.default(error.message, "Parser error when parsing message.", 500, "Parser.parse");
        }
    };
    /**
     * converting raw entities to tgsnake entities.
     * @param {Object} entities - input raw entities
     */
    Parser.prototype.fromRaw = function (entities) {
        var e_1, _a;
        if (!this.raw) {
            throw new ParserError_1.default("Raw not found!", "Plase make sure you set the raw. eg : new Parser(raw).", 404, "Parser.fromRaw");
        }
        var tmp = [];
        var raw = this.raw;
        try {
            for (var entities_1 = __values(entities), entities_1_1 = entities_1.next(); !entities_1_1.done; entities_1_1 = entities_1.next()) {
                var ent = entities_1_1.value;
                if (ent instanceof raw.MessageEntityMention) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "mention",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityHashtag) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "hashtag",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityBotCommand) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "botCommand",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityUrl) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "url",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityEmail) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "email",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityBold) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "bold",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityItalic) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "italic",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityCode) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "code",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityPre) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        language: ent.language,
                        type: "pre",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityTextUrl) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        url: ent.url,
                        type: "textUrl",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityMentionName) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        userId: BigInt(String(ent.userId)),
                        type: "mentionName",
                    }));
                    continue;
                }
                if (ent instanceof raw.InputMessageEntityMentionName) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        userId: BigInt(String(ent.userId)),
                        type: "inputMentionName",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityPhone) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "phone",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityCashtag) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "cashtag",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityUnderline) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "underline",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityStrike) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "strike",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityBlockquote) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "blockquote",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntityBankCard) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "bankCard",
                    }));
                    continue;
                }
                if (ent instanceof raw.MessageEntitySpoiler) {
                    //@ts-ignore
                    ent;
                    tmp.push(new Entities_1.Entities({
                        offset: ent.offset,
                        length: ent.length,
                        type: "spoiler",
                    }));
                    continue;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (entities_1_1 && !entities_1_1.done && (_a = entities_1.return)) _a.call(entities_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return tmp;
    };
    /**
     * converting tgsnake entities to raw entities.
     * @param {Object} entities - input tgsnake entities
     */
    Parser.prototype.toRaw = function (client, entities) {
        return __awaiter(this, void 0, void 0, function () {
            var tmp, raw, entities_2, entities_2_1, ent, _a, _b, _c, _d, _e, e_2_1;
            var e_2, _f, _g;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        if (!this.raw) {
                            throw new ParserError_1.default("Raw not found!", "Plase make sure you set the raw. eg : new Parser(raw).", 404, "Parser.fromRaw");
                        }
                        if (!client) {
                            throw new ParserError_1.default("Client not found!", "Plase make sure you set the client. eg : Parser.fromRaw(client,entities).", 404, "Parser.fromRaw");
                        }
                        tmp = [];
                        raw = this.raw;
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 24, 25, 26]);
                        entities_2 = __values(entities), entities_2_1 = entities_2.next();
                        _h.label = 2;
                    case 2:
                        if (!!entities_2_1.done) return [3 /*break*/, 23];
                        ent = entities_2_1.value;
                        _a = ent.type;
                        switch (_a) {
                            case "mention": return [3 /*break*/, 3];
                            case "hashtag": return [3 /*break*/, 4];
                            case "botCommand": return [3 /*break*/, 5];
                            case "url": return [3 /*break*/, 6];
                            case "email": return [3 /*break*/, 7];
                            case "bold": return [3 /*break*/, 8];
                            case "italic": return [3 /*break*/, 9];
                            case "code": return [3 /*break*/, 10];
                            case "pre": return [3 /*break*/, 11];
                            case "textUrl": return [3 /*break*/, 12];
                            case "mentionName": return [3 /*break*/, 13];
                            case "inputMentionName": return [3 /*break*/, 13];
                            case "phone": return [3 /*break*/, 15];
                            case "cashtag": return [3 /*break*/, 16];
                            case "underline": return [3 /*break*/, 17];
                            case "strike": return [3 /*break*/, 18];
                            case "blockquote": return [3 /*break*/, 19];
                            case "bankCard": return [3 /*break*/, 20];
                            case "spoiler": return [3 /*break*/, 21];
                        }
                        return [3 /*break*/, 22];
                    case 3:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityMention({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 4:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityHashtag({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 5:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityBotCommand({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 6:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityMention({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 7:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityEmail({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 8:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityBold({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 9:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityItalic({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 10:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityCode({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 11:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityPre({
                            offset: ent.offset,
                            length: ent.length,
                            language: ent.language,
                        }));
                        return [3 /*break*/, 22];
                    case 12:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityTextUrl({
                            offset: ent.offset,
                            length: ent.length,
                            url: ent.url,
                        }));
                        return [3 /*break*/, 22];
                    case 13:
                        _c = (_b = tmp).push;
                        _e = (_d = raw.InputMessageEntityMentionName).bind;
                        _g = {
                            offset: ent.offset,
                            length: ent.length
                        };
                        return [4 /*yield*/, client.getInputEntity((0, big_integer_1.default)(String(ent.userId)))];
                    case 14:
                        _c.apply(_b, [
                            //@ts-ignore
                            new (_e.apply(_d, [void 0, (_g.userId = _h.sent(),
                                    _g)]))()]);
                        return [3 /*break*/, 22];
                    case 15:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityPhone({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 16:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityCashtag({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 17:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityUnderline({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 18:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityStrike({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 19:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityBlockquote({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 20:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntityBankCard({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 21:
                        tmp.push(
                        //@ts-ignore
                        new raw.MessageEntitySpoiler({
                            offset: ent.offset,
                            length: ent.length,
                        }));
                        return [3 /*break*/, 22];
                    case 22:
                        entities_2_1 = entities_2.next();
                        return [3 /*break*/, 2];
                    case 23: return [3 /*break*/, 26];
                    case 24:
                        e_2_1 = _h.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 26];
                    case 25:
                        try {
                            if (entities_2_1 && !entities_2_1.done && (_f = entities_2.return)) _f.call(entities_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 26: return [2 /*return*/, tmp];
                }
            });
        });
    };
    return Parser;
}());
exports.Parser = Parser;
