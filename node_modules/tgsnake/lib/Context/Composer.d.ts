import * as Updates from '../Update';
import { Context } from '../Update';
import { MessageContext } from './MessageContext';
import BotError from './Error';
export type MaybeArray<T> = T | T[];
export type MaybePromise<T> = T | Promise<T>;
export type NextFn = () => MaybePromise<void>;
export type MiddlewareFn<C> = (ctx: C, next: NextFn) => MaybePromise<any>;
export interface MiddlewareObj<C> {
    middleware: () => MiddlewareFn<C>;
}
export type ErrorHandler<T> = (error: BotError, context: Combine<Updates.TypeUpdate, T>) => MaybePromise<any>;
export type Middleware<C> = MiddlewareFn<C> | MiddlewareObj<C>;
export type Combine<T, U> = T & Partial<U>;
declare function pass<C>(_ctx: C, next: NextFn): MaybePromise<void>;
export declare function run<C>(middleware: MiddlewareFn<C>, ctx: C): Promise<void>;
export declare class Composer<T = {}> implements MiddlewareObj<Combine<Updates.TypeUpdate, T>> {
    /** @hidden */
    private handler;
    /** @hidden */
    context: Partial<T>;
    prefix: string;
    constructor(...middleware: Array<MiddlewareFn<Combine<Updates.TypeUpdate, T>>>);
    middleware(): MiddlewareFn<Combine<Updates.TypeUpdate, T>>;
    use(...middleware: Array<MiddlewareFn<Combine<Updates.TypeUpdate, T>>>): Composer<T>;
    on<K extends keyof Context>(filter: MaybeArray<K>, ...middleware: Array<MiddlewareFn<Combine<Context[K], T>>>): Composer<T>;
    filter(predicate: any, ...middleware: any[]): Composer<T>;
    drop(predicate: any, ...middleware: any[]): Composer<T>;
    fork(...middleware: any[]): Composer<T>;
    lazy(middlewareFactory: any): Composer<T>;
    route(router: any, routeHandlers: any, fallback?: typeof pass): Composer<T>;
    branch(predicate: any, trueMiddleware: any, falseMiddleware: any): Composer<T>;
    command(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<Combine<MessageContext, T>>>): Composer<T>;
    cmd(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<Combine<MessageContext, T>>>): Composer<T>;
    hears(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<Combine<MessageContext, T>>>): Composer<T>;
    hear(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<Combine<MessageContext, T>>>): Composer<T>;
    action(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<Combine<Updates.UpdateBotCallbackQuery | Updates.UpdateInlineBotCallbackQuery, T>>>): Composer<T>;
    inlineQuery(trigger: MaybeArray<string | RegExp>, ...middleware: Array<MiddlewareFn<Combine<Updates.UpdateBotInlineQuery, T>>>): Composer<T>;
}
export {};
