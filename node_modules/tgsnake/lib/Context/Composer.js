"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Composer = exports.run = void 0;
const MessageContext_1 = require("./MessageContext");
const GetEntity_1 = require("../Telegram/Users/GetEntity");
function flatten(mw) {
    return typeof mw === 'function' ? mw : (ctx, next) => mw.middleware()(ctx, next);
}
function concat(first, andThen) {
    return async (ctx, next) => {
        let nextCalled = false;
        await first(ctx, async () => {
            if (nextCalled)
                throw new Error('`next` already called before!');
            else
                nextCalled = true;
            await andThen(ctx, next);
        });
    };
}
function pass(_ctx, next) {
    return next();
}
const leaf = () => Promise.resolve();
function triggerFn(trigger) {
    return toArray(trigger).map((t) => typeof t === 'string' ? (txt) => (txt === t ? t : null) : (txt) => t.exec(txt));
}
function match(ctx, content, triggers) {
    let match = [];
    for (const t of triggers) {
        const res = t(content);
        if (res) {
            match.push(t);
        }
    }
    return Boolean(match.length);
}
function toArray(e) {
    return Array.isArray(e) ? e : [e];
}
async function run(middleware, ctx) {
    await middleware(ctx, leaf);
}
exports.run = run;
function buildContext(context) {
    let ctx = context;
    if (context['_']) {
        switch (context['_']) {
            case 'updateNewMessage':
            case 'updateShortMessage':
            case 'updateShortChatMessage':
            case 'updateNewChannelMessage':
            case 'updateEditChannelMessage':
            case 'updateEditMessage':
                //@ts-ignore
                ctx = context.message;
                break;
            default:
        }
    }
    return ctx;
}
function filterEvent(filter, ctx) {
    let filters = toArray(filter);
    let h = [];
    h.push('*');
    if (ctx instanceof GetEntity_1.ResultGetEntity)
        h.push('connected');
    if (ctx instanceof MessageContext_1.MessageContext) {
        ctx;
        h.push('message');
        if (ctx.action) {
            h.push(ctx.action['_']);
        }
    }
    if (ctx['_']) {
        switch (ctx['_']) {
            case 'updateNewMessage':
            case 'updateShortMessage':
            case 'updateShortChatMessage':
            case 'updateNewChannelMessage':
                h.push('message');
                if (ctx.message) {
                    ctx.message;
                    if (ctx.message.action) {
                        h.push(ctx.message.action['_']);
                    }
                }
                break;
            case 'updateInlineBotCallbackQuery':
            case 'updateBotCallbackQuery':
                h.push('callbackQuery');
                break;
            case 'updateBotInlineQuery':
                h.push('inlineQuery');
                break;
            case 'updateEditChannelMessage':
            case 'updateEditMessage':
                h.push('editMessage');
                break;
            case 'updateBotPrecheckoutQuery':
                h.push('precheckoutQuery');
                break;
            case 'updateBotShippingQuery':
                h.push('shippingQuery');
                break;
            default:
        }
        h.push(ctx['_']);
        ctx.SnakeClient.log.debug(`Receive ${ctx['_']}`);
    }
    let passed = [];
    for (let f of filters) {
        if (h.includes(f))
            passed.push(f);
    }
    return Boolean(passed.length > 0);
}
class Composer {
    constructor(...middleware) {
        /** @hidden */
        this.context = {};
        this.prefix = '.!/';
        this.handler = middleware.length === 0 ? pass : middleware.map(flatten).reduce(concat);
    }
    middleware() {
        return this.handler;
    }
    use(...middleware) {
        const composer = new Composer(...middleware);
        this.handler = concat(this.handler, flatten(composer));
        return composer;
    }
    on(filter, ...middleware) {
        return this.filter((ctx) => filterEvent(filter, ctx), ...middleware);
    }
    filter(predicate, ...middleware) {
        const composer = new Composer(...middleware);
        this.branch(predicate, composer, pass);
        return composer;
    }
    drop(predicate, ...middleware) {
        return this.filter(async (ctx) => !(await predicate(ctx)), ...middleware);
    }
    fork(...middleware) {
        const composer = new Composer(...middleware);
        const fork = flatten(composer);
        //@ts-ignore
        this.use((ctx, next) => Promise.all([next(), run(fork, ctx)]));
        return composer;
    }
    lazy(middlewareFactory) {
        return this.use(async (context, next) => {
            Object.assign(context, this.context);
            const middleware = await middlewareFactory(context);
            const arr = toArray(middleware);
            await flatten(new Composer(...arr))(Object.assign(buildContext(context), this.context), next);
        });
    }
    route(router, routeHandlers, fallback = pass) {
        return this.lazy(async (ctx) => {
            var _a;
            const route = await router(ctx);
            return route === undefined
                ? []
                : (_a = routeHandlers[route]) !== null && _a !== void 0
                    ? _a
                    : fallback;
        });
    }
    branch(predicate, trueMiddleware, falseMiddleware) {
        return this.lazy(async (ctx) => ((await predicate(ctx)) ? trueMiddleware : falseMiddleware));
    }
    command(trigger, ...middleware) {
        let key = toArray(trigger);
        let filterCmd = (ctx) => {
            const { text } = ctx;
            const { aboutMe } = ctx.SnakeClient;
            let s = text.split(' ');
            let passed = [];
            for (let cmd of key) {
                if (typeof cmd == 'string') {
                    cmd;
                    let r = new RegExp(`^[${this.prefix}](${cmd})${aboutMe.username ? `(@${aboutMe.username})?` : ``}$`, 'i');
                    if (r.test(String(s[0]))) {
                        passed.push(r.exec(String(s[0])));
                    }
                }
                if (cmd instanceof RegExp) {
                    cmd;
                    if (cmd.test(String(s[0]))) {
                        passed.push(cmd.exec(String(s[0])));
                    }
                }
            }
            ctx.match = passed;
            return Boolean(passed.length);
        };
        return this.on(['message', 'editMessage']).filter(filterCmd, ...middleware);
    }
    cmd(trigger, ...middleware) {
        return this.command(trigger, ...middleware);
    }
    hears(trigger, ...middleware) {
        let tgr = triggerFn(trigger);
        return this.on(['message', 'editMessage']).filter((ctx) => {
            const { text } = ctx;
            return match(ctx, String(text), tgr);
        }, ...middleware);
    }
    hear(trigger, ...middleware) {
        return this.hears(trigger, ...middleware);
    }
    action(trigger, ...middleware) {
        let key = toArray(trigger);
        let filterCmd = (ctx) => {
            const { data } = ctx;
            let passed = [];
            for (let cmd of key) {
                if (typeof cmd == 'string') {
                    cmd;
                    if (cmd == data)
                        passed.push(cmd);
                }
                if (cmd instanceof RegExp) {
                    cmd;
                    if (cmd.test(String(data)))
                        passed.push(cmd);
                }
            }
            return Boolean(passed.length);
        };
        return this.on('callbackQuery').filter(filterCmd, ...middleware);
    }
    inlineQuery(trigger, ...middleware) {
        let key = toArray(trigger);
        let filterCmd = (ctx) => {
            const { query } = ctx;
            let passed = [];
            for (let cmd of key) {
                if (typeof cmd == 'string') {
                    cmd;
                    if (cmd == query)
                        passed.push(cmd);
                }
                if (cmd instanceof RegExp) {
                    cmd;
                    if (cmd.test(String(query)))
                        passed.push(cmd);
                }
            }
            return Boolean(passed.length);
        };
        return this.on('inlineQuery').filter(filterCmd, ...middleware);
    }
}
exports.Composer = Composer;
