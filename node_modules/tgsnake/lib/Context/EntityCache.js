"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityCache = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const fs_1 = __importDefault(require("fs"));
const GetEntity_1 = require("../Telegram/Users/GetEntity");
const CleanObject_1 = require("../Utils/CleanObject");
const util_1 = require("util");
class EntityCache {
    constructor(sessionName) {
        /** @hidden */
        this._cache = new Map();
        this._sessionName = sessionName;
    }
    /** @hidden */
    [util_1.inspect.custom]() {
        return (0, CleanObject_1.betterConsoleLog)(this);
    }
    /** @hidden */
    toJSON() {
        let obj = (0, CleanObject_1.betterConsoleLog)(this);
        for (let [key, value] of Object.entries(obj)) {
            if (typeof value == 'bigint')
                obj[key] = String(value);
        }
        return obj;
    }
    set(key, value) {
        return this._cache.set(key, value);
    }
    get(key) {
        return this._cache.get(key);
    }
    has(key) {
        return this._cache.has(key);
    }
    clear() {
        return this._cache.clear();
    }
    delete(key) {
        return this._cache.delete(key);
    }
    get size() {
        return this._cache.size;
    }
    entries() {
        return this._cache.entries();
    }
    load() {
        if (!fs_1.default.existsSync(`${process.cwd()}/${this._sessionName}`)) {
            fs_1.default.mkdirSync(`${process.cwd()}/${this._sessionName}`);
        }
        if (fs_1.default.existsSync(`${process.cwd()}/${this._sessionName}/cache.json`)) {
            let file = JSON.parse(fs_1.default.readFileSync(`${process.cwd()}/${this._sessionName}/cache.json`, 'utf8'));
            for (let [k, v] of file) {
                let g = new GetEntity_1.ResultGetEntity();
                for (let [kk, vv] of Object.entries(v)) {
                    if (typeof vv == 'string') {
                        if (vv.startsWith(':bigint:')) {
                            let vvv = vv.replace(':bigint:', '');
                            if (!isNaN(Number(vvv))) {
                                g[kk] = BigInt(vvv);
                            }
                        }
                        else {
                            g[kk] = vv;
                        }
                        // remove the null entities
                    }
                    else if (vv !== null) {
                        g[kk] = vv;
                    }
                }
                if (k && typeof k === 'string') {
                    this._cache.set(k.startsWith(':bigint:') ? BigInt(k.replace(':bigint:', '')) : k, g);
                }
                // skip when array is null/undefined
            }
        }
        return this;
    }
    save() {
        if (!fs_1.default.existsSync(`${process.cwd()}/${this._sessionName}`)) {
            fs_1.default.mkdirSync(`${process.cwd()}/${this._sessionName}`);
        }
        fs_1.default.writeFileSync(`${process.cwd()}/${this._sessionName}/cache.json`, JSON.stringify([...this._cache.entries()], (k, v) => {
            return typeof v == 'bigint' ? `:bigint:${v}` : v;
        }));
        return this;
    }
}
exports.EntityCache = EntityCache;
