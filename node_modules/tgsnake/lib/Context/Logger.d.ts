/// <reference types="node" />
import * as NodeUtil from 'util';
export interface LoggerColor {
    debug?: string;
    info?: string;
    error?: string;
    warning?: string;
}
export type TypeLogLevel = 'none' | 'info' | 'debug' | 'error' | 'verbose' | 'warning';
export type TypeWarningLog = 'soft' | 'hard';
export declare class Logger {
    /** @hidden */
    private _color;
    /** @hidden */
    private _level;
    /** @hidden */
    private _enable;
    /** @hidden */
    private _warningLogLevel;
    constructor(level: TypeLogLevel, enable: boolean, color?: LoggerColor);
    /** @hidden */
    [NodeUtil.inspect.custom](): {
        [key: string]: any;
    };
    /** @hidden */
    toJSON(): {
        [key: string]: any;
    };
    /**
     * @hidden
     * Creating a log template.
     */
    private template;
    /**
     * Setting a log level.
     */
    setLogLevel(level: TypeLogLevel): string | any[];
    /**
     * Setting a warning level. <br/>
     * If you set "hard" the warning will be appears in any log levels.<br/>
     * If you set "soft" the warning will be appears only in warning log level.
     */
    setWarningLevel(level: TypeWarningLog): string | any[];
    /**
     * Create log without template and without levels.
     */
    log(...args: Array<any>): any[];
    /**
     * Creating log with debug level
     */
    debug(...args: Array<any>): any[] | TypeLogLevel;
    /**
     * Creating log with info level
     */
    info(...args: Array<any>): any[] | TypeLogLevel;
    /**
     * Creating log with error level
     */
    error(...args: Array<any>): any[] | TypeLogLevel;
    /**
     * Creating log with warning level
     */
    warning(...args: Array<any>): any[] | TypeLogLevel;
    /**
     * Creating log with combine level. <br/>
     * Like if you want to show the console in level "error" and "info" pass it as array in first arguments.<br/>
     * The selected template will use the first index in the array.
     */
    combine(level: Array<TypeLogLevel>, ...args: Array<any>): any[] | TypeLogLevel;
}
