"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const chalk_1 = __importDefault(require("chalk"));
const NodeUtil = __importStar(require("util"));
const CleanObject_1 = require("../Utils/CleanObject");
class Logger {
    constructor(level, enable, color) {
        this._level = level;
        this._enable = enable;
        this._warningLogLevel = 'hard';
        this._color = Object.assign({
            debug: 'blue',
            info: 'green',
            error: 'red',
            warning: 'yellow',
        }, color ? color : {});
    }
    /** @hidden */
    [NodeUtil.inspect.custom]() {
        return (0, CleanObject_1.betterConsoleLog)(this);
    }
    /** @hidden */
    toJSON() {
        let obj = (0, CleanObject_1.betterConsoleLog)(this);
        for (let [key, value] of Object.entries(obj)) {
            if (typeof value == 'bigint')
                obj[key] = String(value);
        }
        return obj;
    }
    /**
     * @hidden
     * Creating a log template.
     */
    template(level) {
        return ['üêç', chalk_1.default[this._color[level]](level), '-'];
    }
    /**
     * Setting a log level.
     */
    setLogLevel(level) {
        let _level = level.toLowerCase().trim();
        let approved = ['none', 'info', 'debug', 'error', 'verbose'];
        //@ts-ignore
        if (!approved.includes(_level))
            return this.error(`Level of warning must be "none" or "info" or "debug" or "error" or "verbose", but got "${level}"`);
        //@ts-ignore
        return (this._level = _level);
    }
    /**
     * Setting a warning level. <br/>
     * If you set "hard" the warning will be appears in any log levels.<br/>
     * If you set "soft" the warning will be appears only in warning log level.
     */
    setWarningLevel(level) {
        let _level = level.toLowerCase().trim();
        let approved = ['hard', 'soft'];
        //@ts-ignore
        if (!approved.includes(_level))
            return this.error(`Level of warning must be "hard" or "soft", but got "${level}"`);
        //@ts-ignore
        return (this._warningLogLevel = _level);
    }
    /**
     * Create log without template and without levels.
     */
    log(...args) {
        if (this._enable) {
            if (args.length > 1) {
                let fargs = new Array();
                for (let arg of args) {
                    if (typeof arg == 'object') {
                        fargs.push(NodeUtil.inspect(arg, {
                            showHidden: true,
                            colors: true,
                        }));
                    }
                    else {
                        fargs.push(arg);
                    }
                }
                console.log(...fargs);
            }
            else {
                let fargs = new Array();
                if (typeof args[0] == 'object') {
                    fargs.push(NodeUtil.inspect(args[0], {
                        showHidden: true,
                        colors: true,
                    }));
                }
                else {
                    fargs.push(args[0]);
                }
                console.log(...fargs);
            }
        }
        return args;
    }
    /**
     * Creating log with debug level
     */
    debug(...args) {
        let level = ['debug', 'verbose'];
        if (!level.includes(this._level))
            return this._level;
        return this.log(...this.template('debug'), ...args);
    }
    /**
     * Creating log with info level
     */
    info(...args) {
        let level = ['info', 'debug', 'verbose'];
        if (!level.includes(this._level))
            return this._level;
        return this.log(...this.template('info'), ...args);
    }
    /**
     * Creating log with error level
     */
    error(...args) {
        let level = ['error', 'debug', 'verbose'];
        if (!level.includes(this._level))
            return this._level;
        return this.log(...this.template('error'), ...args);
    }
    /**
     * Creating log with warning level
     */
    warning(...args) {
        let level = ['warning', 'debug', 'verbose'];
        if (this._warningLogLevel === 'hard') {
            level.concat(['none', 'info', 'error']);
        }
        if (!level.includes(this._level))
            return this._level;
        return this.log(...this.template('warning'), ...args);
    }
    /**
     * Creating log with combine level. <br/>
     * Like if you want to show the console in level "error" and "info" pass it as array in first arguments.<br/>
     * The selected template will use the first index in the array.
     */
    combine(level, ...args) {
        if (!level.includes(this._level))
            return this._level;
        return this.log(...this.template(level[0]), ...args);
    }
}
exports.Logger = Logger;
