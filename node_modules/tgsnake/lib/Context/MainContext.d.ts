/// <reference types="node" />
import { ResultGetEntity } from '../Telegram/Users/GetEntity';
import { Snake } from '../Client';
import { Api } from 'telegram';
import { Composer, ErrorHandler } from './Composer';
import { EntityCache } from './EntityCache';
import { Options } from '../Interface/Options';
import { Logger } from './Logger';
import { inspect } from 'util';
export declare class MainContext<T = {}> extends Composer<T> {
    /** @hidden */
    private _options;
    /** @hidden */
    private _gramjsOptions;
    connected: Boolean;
    aboutMe: ResultGetEntity;
    entityCache: EntityCache;
    log: Logger;
    /** @hidden */
    errorHandler: ErrorHandler<T>;
    constructor();
    /** @hidden */
    [inspect.custom](): {
        [key: string]: any;
    };
    /** @hidden */
    toJSON(): {
        [key: string]: any;
    };
    get options(): Options;
    set options(options: Options);
    get gramjsOptions(): Options;
    set gramjsOptions(options: Options);
    handleUpdate(update: Api.TypeUpdate | ResultGetEntity, SnakeClient: Snake): Promise<any>;
    catch(errorHandler: ErrorHandler<T>): ErrorHandler<T>;
}
