"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainContext = void 0;
const GetEntity_1 = require("../Telegram/Users/GetEntity");
const Updates = __importStar(require("../Update"));
const Composer_1 = require("./Composer");
const Error_1 = __importDefault(require("./Error"));
const CleanObject_1 = require("../Utils/CleanObject");
const util_1 = require("util");
class MainContext extends Composer_1.Composer {
    constructor() {
        super();
        this.connected = false;
        /** @hidden */
        this.errorHandler = (error, update) => {
            this.log.error(`Snake error (${error.message}) when processing update :`);
            this.log.error(update);
            this.log.error(`${error.functionName}(${error.functionArgs})`);
            throw error;
        };
    }
    /** @hidden */
    [util_1.inspect.custom]() {
        return (0, CleanObject_1.betterConsoleLog)(this);
    }
    /** @hidden */
    toJSON() {
        let obj = (0, CleanObject_1.betterConsoleLog)(this);
        for (let [key, value] of Object.entries(obj)) {
            if (typeof value == 'bigint')
                obj[key] = String(value);
        }
        return obj;
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this._options = options;
    }
    get gramjsOptions() {
        return this._gramjsOptions;
    }
    set gramjsOptions(options) {
        this._gramjsOptions = options;
    }
    async handleUpdate(update, SnakeClient) {
        if (!update)
            return false;
        update = await (0, CleanObject_1.Cleaning)(update);
        this.use = () => {
            throw new Error_1.default(`bot.use is unavailable when bot running. so kill bot first then add bot.use in your source code then running again.`, 'Composer', '');
        };
        let parsed = false;
        let parsedUpdate;
        if (update instanceof GetEntity_1.ResultGetEntity) {
            try {
                this.log.debug('Receive update (ResultGetEntity)');
                parsed = true;
                //@ts-ignore
                parsedUpdate = update;
                await (0, Composer_1.run)(this.middleware(), parsedUpdate);
                return update;
            }
            catch (error) {
                //@ts-ignore
                if (error._isBotErrorClass) {
                    //@ts-ignore
                    return this.errorHandler(error, parsed ? parsedUpdate : update);
                }
                let botError = new Error_1.default(error.message, error.functionName ? error.functionName : `handleUpdate`, error.functionArgs ? error.functionArgs : `[Update]`);
                this.log.info('something is wrong,set logger to "error" to see more info.');
                //@ts-ignore
                return this.errorHandler(botError, parsed ? parsedUpdate : update);
            }
        }
        else {
            if (update.className) {
                if (Updates[update.className]) {
                    try {
                        this.log.debug(`Receive update ${update.className}`);
                        let jsonUpdate = new Updates[update.className]();
                        await jsonUpdate.init(update, SnakeClient);
                        parsed = true;
                        parsedUpdate = jsonUpdate;
                        await (0, Composer_1.run)(this.middleware(), parsedUpdate);
                        return jsonUpdate;
                    }
                    catch (error) {
                        //@ts-ignore
                        if (error._isBotErrorClass) {
                            //@ts-ignore
                            return this.errorHandler(error, parsed ? parsedUpdate : update);
                        }
                        let botError = new Error_1.default(error.message, error.functionName ? error.functionName : `handleUpdate`, error.functionArgs ? error.functionArgs : `[Update]`);
                        this.log.info('something is wrong,set logger to "error" to see more info.');
                        //@ts-ignore
                        return this.errorHandler(botError, parsed ? parsedUpdate : update);
                    }
                }
            }
        }
    }
    catch(errorHandler) {
        this.log.debug(`Replace default error handle`);
        return (this.errorHandler = errorHandler);
    }
}
exports.MainContext = MainContext;
