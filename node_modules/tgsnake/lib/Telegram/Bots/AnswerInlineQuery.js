"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnswerInlineQuery = void 0;
const telegram_1 = require("telegram");
const big_integer_1 = __importDefault(require("big-integer"));
const Error_1 = __importDefault(require("../../Context/Error"));
let defaultParam = {
    cacheTime: 300,
};
async function AnswerInlineQuery(snakeClient, id, results, more = defaultParam) {
    try {
        snakeClient.log.debug('Running telegram.answerInlineQuery');
        let final = await snakeClient.client.invoke(new telegram_1.Api.messages.SetInlineBotResults(Object.assign(Object.assign({ queryId: (0, big_integer_1.default)(String(id)), results: results, gallery: more.gallery, nextOffset: more.nextOffset }, (more.switchPmText || more.switchPmParameter
            ? {
                switchPm: new telegram_1.Api.InlineBotSwitchPM({
                    text: String(more.switchPmText),
                    startParam: String(more.switchPmParameter),
                }),
            }
            : {})), { cacheTime: more.cacheTime, private: more.isPersonal })));
        return final;
    }
    catch (error) {
        snakeClient.log.error('Failed running telegram.answerInlineQuery');
        throw new Error_1.default(error.message, 'telegram.answerInlineQuery', `${id},${JSON.stringify(results, null, 2)}${more ? ',' + JSON.stringify(more) : ''}`);
    }
}
exports.AnswerInlineQuery = AnswerInlineQuery;
