"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnswerShippingQuery = void 0;
const telegram_1 = require("telegram");
const big_integer_1 = __importDefault(require("big-integer"));
const Error_1 = __importDefault(require("../../Context/Error"));
const CleanObject_1 = require("../../Utils/CleanObject");
async function AnswerShippingQuery(snakeClient, id, options, error) {
    try {
        return await snakeClient.client.invoke(new telegram_1.Api.messages.SetBotShippingResults({
            queryId: (0, big_integer_1.default)(String(id)),
            error: error,
            shippingOptions: options
                ? options.map((option) => new telegram_1.Api.ShippingOption({
                    id: option.id,
                    title: option.title,
                    prices: option.prices.map((price) => new telegram_1.Api.LabeledPrice({
                        amount: (0, big_integer_1.default)(String(price.amount)),
                        label: price.label,
                    })),
                }))
                : undefined,
        }));
    }
    catch (error) {
        snakeClient.log.error('Failed running telegram.answerShippingQuery');
        throw new Error_1.default(error.message, 'telegram.answerShippingQuery', `${id}${options ? `,${JSON.stringify((0, CleanObject_1.toJSON)(options))}` : ''}${error ? `,${error}` : ''}`);
    }
}
exports.AnswerShippingQuery = AnswerShippingQuery;
