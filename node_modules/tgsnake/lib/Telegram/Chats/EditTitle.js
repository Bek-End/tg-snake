"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditTitle = void 0;
const telegram_1 = require("telegram");
const Updates = __importStar(require("../../Update"));
const Error_1 = __importDefault(require("../../Context/Error"));
const ToBigInt_1 = require("../../Utils/ToBigInt");
/**
 * edit chat/group/channel title.
 * @param snakeClient - Client
 * @param {bigint|number|string} chatId - Chat/Groups/Channel id.
 * @param {string} title - New title.
 * ```ts
 * bot.command("editTitle",async (ctx) => {
 *    if(!ctx.chat.private){
 *        let results = await ctx.telegram.editTitle(ctx.chat.id,"hey new title")
 *        console.log(results)
 *    }
 * })
 * ```
 * This method will return UpdateNewMessage or UpdateNewChannelMessage. if success.
 */
async function EditTitle(snakeClient, chatId, title) {
    try {
        snakeClient.log.debug('Running telegram.editTitle');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let [id, type] = await (0, ToBigInt_1.toBigInt)(chatId, snakeClient);
        if (type == 'channel') {
            let results = await snakeClient.client.invoke(new telegram_1.Api.channels.EditTitle({
                channel: id,
                title: title,
            }));
            snakeClient.log.debug('Creating results telegram.editTitle');
            return await generateResults(results, snakeClient);
        }
        else {
            return snakeClient.client.invoke(new telegram_1.Api.messages.EditChatTitle({
                chatId: id,
                title: title,
            }));
        }
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.editTitle');
        throw new Error_1.default(error.message, 'telegram.editTitle', `${chatId},${title}`);
    }
}
exports.EditTitle = EditTitle;
async function generateResults(results, SnakeClient) {
    if (results instanceof telegram_1.Api.Updates) {
        results;
        if (results.updates.length > 0) {
            for (let i = 0; i < results.updates.length; i++) {
                let update = results.updates[i];
                if (update instanceof telegram_1.Api.UpdateNewMessage) {
                    update;
                    let res = new Updates.UpdateNewMessage();
                    await res.init(update, SnakeClient);
                    return res;
                }
                if (update instanceof telegram_1.Api.UpdateNewChannelMessage) {
                    update;
                    let res = new Updates.UpdateNewChannelMessage();
                    await res.init(update, SnakeClient);
                    return res;
                }
            }
        }
    }
}
