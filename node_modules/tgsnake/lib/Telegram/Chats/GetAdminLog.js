"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAdminLog = exports.ClassLogGetAdminLog = exports.ClassResultGetAdminLog = void 0;
const telegram_1 = require("telegram");
const big_integer_1 = __importDefault(require("big-integer"));
const Error_1 = __importDefault(require("../../Context/Error"));
const ToBigInt_1 = require("../../Utils/ToBigInt");
class ClassResultGetAdminLog {
    constructor(resultGetAdminLog) {
        if (resultGetAdminLog) {
            if (resultGetAdminLog.events.length > 0) {
                let tempLog = new Array();
                for (let i = 0; i < resultGetAdminLog.events.length; i++) {
                    let event = resultGetAdminLog.events[i];
                    tempLog.push(new ClassLogGetAdminLog(event));
                }
                this.log = tempLog;
            }
        }
    }
}
exports.ClassResultGetAdminLog = ClassResultGetAdminLog;
class ClassLogGetAdminLog {
    constructor(event) {
        if (event) {
            if (event.id)
                this.id = event.id;
            if (event.date)
                this.date = event.date;
            if (event.userId)
                this.userId = BigInt((0, ToBigInt_1.toString)(event.userId));
            if (event.action) {
                let tempAction = Object.assign({}, event.action);
                delete tempAction.CONSTRUCTOR_ID;
                delete tempAction.SUBCLASS_OF_ID;
                delete tempAction.classType;
                tempAction.actionName = String(tempAction.className).replace(/^(ChannelAdminLogEventAction|AdminLogEventAction)/i, '');
                delete tempAction.className;
                this.action = tempAction;
            }
        }
    }
}
exports.ClassLogGetAdminLog = ClassLogGetAdminLog;
/**
 * Get the admin log of a channel/supergroup.
 * @param snakeClient - Client
 * @param {number|string|bigint} chatId -  Chat/Channel/Group id.
 * @param {Object} more - more parameters to use.
 * ```ts
 * bot.command("getAdminLog",async (ctx) => {
 *     if(!ctx.chat.private){
 *        let results = await ctx.telegram.getAdminLog(ctx.chat.id)
 *        console.log(results)
 *     }
 * })
 * ```
 */
async function GetAdminLog(snakeClient, chatId, more) {
    try {
        snakeClient.log.debug('Running telegram.getAdminLog');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let options = Object.assign({
            query: '',
            filter: {
                join: true,
                leave: true,
                invite: true,
                ban: true,
                unban: true,
                kick: true,
                unkick: true,
                promote: true,
                demote: true,
                info: true,
                settings: true,
                pinned: true,
                groupCall: true,
                invites: true,
                edit: true,
                delete: true,
            },
            maxId: undefined,
            minId: undefined,
            limit: undefined,
        }, more);
        return new ClassResultGetAdminLog(await snakeClient.client.invoke(new telegram_1.Api.channels.GetAdminLog({
            channel: (0, ToBigInt_1.convertId)(chatId),
            eventsFilter: new telegram_1.Api.ChannelAdminLogEventsFilter(options.filter),
            q: options.query,
            maxId: options.maxId ? (0, big_integer_1.default)(options.maxId) : options.maxId,
            minId: options.minId ? (0, big_integer_1.default)(options.minId) : options.minId,
            limit: options.limit,
        })));
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.getAdminLog');
        throw new Error_1.default(error.message, 'telegram.getAdminLog', `${chatId}${more ? ',' + JSON.stringify(more) : ''}`);
    }
}
exports.GetAdminLog = GetAdminLog;
