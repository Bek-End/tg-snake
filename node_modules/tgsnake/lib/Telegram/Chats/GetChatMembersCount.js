"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetChatMembersCount = void 0;
const GetEntity_1 = require("../Users/GetEntity");
const telegram_1 = require("telegram");
const Error_1 = __importDefault(require("../../Context/Error"));
const big_integer_1 = __importDefault(require("big-integer"));
/**
 * Get the number of members in a chat.
 * @param snakeClient - client
 * @param {number|string|bigint} chatId - Chat or channels id to getting the number of members.
 * ```ts
 * bot.command("getChatMembersCount",async (ctx) => {
 *     let results = await ctx.telegram.getChatMembersCount(ctx.chat.id)
 *     console.log(results)
 * })
 * ```
 */
async function GetChatMembersCount(snakeClient, chatId) {
    try {
        snakeClient.log.debug('Running telegram.getChatMembersCount');
        let chat = await snakeClient.telegram.getEntity(chatId, true);
        if (chat.type === 'user') {
            throw new Error('Typeof chatId must be channel or chat, not a user.');
        }
        if (chat.participantsCount && chat.participantsCount !== null) {
            return chat.participantsCount;
        }
        if (chat.type == 'chat') {
            let r = await snakeClient.client.invoke(new telegram_1.Api.messages.GetChats({
                id: [(0, big_integer_1.default)(chat.id)],
            }));
            let s = r.chats[0];
            snakeClient.entityCache.set(chat.id, await new GetEntity_1.ResultGetEntity().init(s, snakeClient));
            return s.participantsCount;
        }
        if (chat.type == 'channel' || chat.type == 'supergroup') {
            let r = await snakeClient.client.invoke(new telegram_1.Api.channels.GetFullChannel({
                channel: (0, big_integer_1.default)(chat.id),
            }));
            let fc = r.fullChat;
            let s = r.chats[0];
            s.participantsCount = fc.participantsCount;
            snakeClient.entityCache.set(chat.id, await new GetEntity_1.ResultGetEntity().init(s, snakeClient));
            return s.participantsCount;
        }
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.getChatMembersCount');
        throw new Error_1.default(error.message, 'telegram.getChatMembersCount', `${chatId}`);
    }
}
exports.GetChatMembersCount = GetChatMembersCount;
