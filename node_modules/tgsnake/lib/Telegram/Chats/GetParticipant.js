"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetParticipant = void 0;
const telegram_1 = require("telegram");
const ChatParticipants_1 = require("../../Utils/ChatParticipants");
const Error_1 = __importDefault(require("../../Context/Error"));
const big_integer_1 = __importDefault(require("big-integer"));
/**
 * Get info about a channel/supergroup participant.
 * @param snakeClient - Client.
 * @param {number|string|bigint} - Chat or channels id to getting the list of members.
 * @param {number|string|bigint} - Participant to get info about.
 * ```ts
 * bot.command("getChatMember",async (ctx) => {
 *     let results = await ctx.telegram.getParticipant(ctx.chat.id,ctx.from.id) // getChatMember and getParticipant.is same methods.
 *     console.log(results)
 * })
 * ```
 */
async function GetParticipant(snakeClient, chatId, userId) {
    try {
        snakeClient.log.debug('Running telegram.getParticipant');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        if (typeof userId === 'number')
            snakeClient.log.warning('Type of userId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let { client } = snakeClient;
        let result = await client.invoke(new telegram_1.Api.channels.GetParticipant({
            channel: typeof chatId == 'string'
                ? chatId
                : typeof chatId == 'number'
                    ? (0, big_integer_1.default)(chatId)
                    : (0, big_integer_1.default)(chatId),
            participant: typeof userId == 'string'
                ? userId
                : typeof userId == 'number'
                    ? (0, big_integer_1.default)(userId)
                    : (0, big_integer_1.default)(userId),
        }));
        snakeClient.log.debug('Creating results telegram.getParticipant');
        let _results = new ChatParticipants_1.ChatParticipants();
        await _results.init(result, snakeClient);
        return _results.participants[0];
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.getParticipant');
        throw new Error_1.default(error.message, 'telegram.getParticipant', `${chatId},${userId}`);
    }
}
exports.GetParticipant = GetParticipant;
