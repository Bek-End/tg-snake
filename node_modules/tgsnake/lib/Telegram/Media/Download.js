"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Download = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const telegram_1 = require("telegram");
const Medias = __importStar(require("../../Utils/Medias"));
const tg_file_id_1 = require("tg-file-id");
const big_integer_1 = __importDefault(require("big-integer"));
const Error_1 = __importDefault(require("../../Context/Error"));
async function Download(snakeClient, media, params) {
    try {
        snakeClient.log.debug('Running telegram.download');
        const { client, log } = snakeClient;
        if (typeof media == 'string') {
            media;
            let dFile = await (0, tg_file_id_1.decodeFileId)(media);
            let dParams = Object.assign({
                dcId: dFile.dcId,
                progressCallback: (progress) => {
                    return log.debug(`Downloading ${media} [${Math.round(progress)}]`);
                },
            }, params !== null && params !== void 0 ? params : {});
            if (dParams.fileSize && typeof dParams.fileSize == 'bigint') {
                // @ts-ignore
                dParams.fileSize = (0, big_integer_1.default)(String(dParams.fileSize));
            }
            switch (dFile.typeId) {
                // ChatPhoto
                case 1:
                    const getInputPeer = (dialogId, dialogAccessHash) => {
                        if (String(dialogId).startsWith('-100')) {
                            return new telegram_1.Api.InputPeerChannel({
                                channelId: (0, big_integer_1.default)(String(dialogId)),
                                accessHash: (0, big_integer_1.default)(String(dialogAccessHash)),
                            });
                        }
                        if (String(dialogId).startsWith('-')) {
                            return new telegram_1.Api.InputPeerChat({
                                chatId: (0, big_integer_1.default)(String(dialogId)),
                            });
                        }
                        return new telegram_1.Api.InputPeerUser({
                            userId: (0, big_integer_1.default)(String(dialogId)),
                            accessHash: (0, big_integer_1.default)(String(dialogAccessHash)),
                        });
                    };
                    return client.downloadFile(new telegram_1.Api.InputPeerPhotoFileLocation({
                        big: dFile.photoSize == 'big',
                        peer: getInputPeer(BigInt(String(dFile.dialogId)), BigInt(String(dFile.dialogAccessHash))),
                        photoId: (0, big_integer_1.default)(String(dFile.id)),
                    }), 
                    // @ts-ignore
                    dParams);
                    break;
                // Photo
                case 2:
                    return client.downloadFile(new telegram_1.Api.InputPhotoFileLocation({
                        id: (0, big_integer_1.default)(String(dFile.id)),
                        accessHash: (0, big_integer_1.default)(String(dFile.access_hash)),
                        fileReference: Buffer.from(dFile.fileReference, 'hex'),
                        thumbSize: 'w',
                    }), 
                    // @ts-ignore
                    dParams);
                    break;
                // Document
                case 3:
                case 4:
                case 5:
                case 8:
                case 9:
                case 10:
                case 13:
                    return client.downloadFile(new telegram_1.Api.InputDocumentFileLocation({
                        id: (0, big_integer_1.default)(String(dFile.id)),
                        accessHash: (0, big_integer_1.default)(String(dFile.access_hash)),
                        fileReference: Buffer.from(dFile.fileReference, 'hex'),
                        thumbSize: 'w',
                    }), 
                    // @ts-ignore
                    dParams);
                    break;
                default:
                    throw new Error(`This fileId has no attribute download!`);
            }
        }
        else {
            switch (media.constructor) {
                case Medias.MediaChatPhoto:
                    media;
                    return media.download(undefined, params);
                    break;
                case Medias.MediaPhoto:
                    media;
                    return media.download(undefined, params);
                    break;
                case Medias.MediaSticker:
                case Medias.MediaVoice:
                case Medias.MediaVideoNote:
                case Medias.MediaVideo:
                case Medias.MediaAnimation:
                case Medias.MediaAudio:
                case Medias.MediaDocument:
                    //@ts-ignore
                    return media.download(undefined, params);
                    break;
                default:
                    throw new Error(`This media has no attribute download!`);
            }
        }
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.download');
        throw new Error_1.default(error.message, 'telegram.download', `${typeof media == 'string' ? media : JSON.stringify(media)},${params ? JSON.stringify(params) : ''}`);
    }
}
exports.Download = Download;
