"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetFileInfo = void 0;
const path_1 = __importDefault(require("path"));
const axios_1 = __importDefault(require("axios"));
const file_type_1 = require("file-type");
async function GetFileInfo(file) {
    if (Buffer.isBuffer(file)) {
        let fileInfo = await (0, file_type_1.fromBuffer)(file);
        let r = Object.assign(fileInfo || {}, {
            source: file,
        });
        return r;
    }
    if (typeof file == 'string') {
        file;
        let basename = path_1.default.basename(file);
        if (/^http/i.exec(file)) {
            let res = await axios_1.default.get(file, {
                responseType: 'arraybuffer',
            });
            let data = res.data;
            let basebuffer = Buffer.from(data, 'utf-8');
            let fileInfo = await (0, file_type_1.fromBuffer)(basebuffer);
            let file_name = basename;
            let match = /\.([0-9a-z]+)(?=[?#])|(\.)(?:[\w]+)$/gim.exec(file_name);
            if (!match) {
                file_name = `${file_name}.${fileInfo === null || fileInfo === void 0 ? void 0 : fileInfo.ext}`;
            }
            let r = Object.assign(fileInfo || {}, {
                source: basebuffer,
                fileName: file_name,
            });
            return r;
        }
        if (/^(\/|\.\.?\/|~\/)/i.exec(file)) {
            let fileInfo = await (0, file_type_1.fromFile)(file);
            let file_name = basename;
            let match = /\.([0-9a-z]+)(?=[?#])|(\.)(?:[\w]+)$/gim.exec(file_name);
            if (!match) {
                file_name = `${file_name}.${fileInfo === null || fileInfo === void 0 ? void 0 : fileInfo.ext}`;
            }
            let r = Object.assign(fileInfo || {}, {
                source: file,
                fileName: file_name,
            });
            return r;
        }
    }
}
exports.GetFileInfo = GetFileInfo;
