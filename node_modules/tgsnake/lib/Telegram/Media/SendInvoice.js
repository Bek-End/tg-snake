"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendInvoice = void 0;
const telegram_1 = require("telegram");
const SendMedia_1 = require("./SendMedia");
const big_integer_1 = __importDefault(require("big-integer"));
const Error_1 = __importDefault(require("../../Context/Error"));
const CleanObject_1 = require("../../Utils/CleanObject");
/**
 * Sending invoice (payment).
 * @param snakeClient {Object} - Client.
 * @param chatId {String|Number|BigInt} - target chat.
 * @param invoice {Object} - Invoice will be sending.
 * @param more {Object} - More parameter will be using to sending invoice.
 * ```ts
 * bot.command("invoice",(ctx)=>{
 *   return ctx.telegram.sendInvoice(ctx.chat.id,{
 *      test : true,
 *      currency : "usd",
 *      payload : "some payload here.",
 *      provider : "",
 *      title : "testing",
 *      description : "just testing lol. xD",
 *      prices : [{
 *          amount : 1000n,
 *          label : "1"
 *      }]
 *   })
 * })
 * ```
 */
async function SendInvoice(snakeClient, chatId, invoice, more) {
    var _a, _b, _c, _d;
    try {
        return (0, SendMedia_1.SendMedia)(snakeClient, chatId, new telegram_1.Api.InputMediaInvoice(Object.assign({ title: invoice.title, description: invoice.description, invoice: new telegram_1.Api.Invoice({
                test: invoice.test,
                currency: invoice.currency,
                prices: invoice.prices.map((price) => new telegram_1.Api.LabeledPrice({ amount: (0, big_integer_1.default)(String(price.amount)), label: price.label })),
                nameRequested: invoice.nameRequested,
                phoneRequested: invoice.phoneRequested,
                emailRequested: invoice.emailRequested,
                shippingAddressRequested: invoice.shippingAddressRequested,
                flexible: invoice.flexible,
                phoneToProvider: invoice.phoneToProvider,
                emailToProvider: invoice.emailToProvider,
                maxTipAmount: invoice.maxTipAmount !== undefined ? (0, big_integer_1.default)(String(invoice.maxTipAmount)) : undefined,
                suggestedTipAmounts: invoice.suggestedTipAmounts !== undefined
                    ? invoice.suggestedTipAmounts.map((x) => (0, big_integer_1.default)(String(x)))
                    : undefined,
            }), payload: Buffer.from(invoice.payload), provider: invoice.provider, providerData: new telegram_1.Api.DataJSON({
                data: invoice.providerData
                    ? typeof invoice.providerData === 'string'
                        ? invoice.providerData
                        : JSON.stringify(invoice.providerData)
                    : JSON.stringify({}),
            }), startParam: invoice.startParam }, (invoice.photoUrl
            ? {
                photo: new telegram_1.Api.InputWebDocument({
                    url: invoice.photoUrl,
                    size: (_a = invoice.photoSize) !== null && _a !== void 0 ? _a : 0,
                    mimeType: (_b = invoice.photoMimeType) !== null && _b !== void 0 ? _b : 'image/png',
                    attributes: invoice.photoWidth !== undefined || invoice.photoHight !== undefined
                        ? [
                            new telegram_1.Api.DocumentAttributeImageSize({
                                w: (_c = invoice.photoWidth) !== null && _c !== void 0 ? _c : 0,
                                h: (_d = invoice.photoHight) !== null && _d !== void 0 ? _d : 0,
                            }),
                        ]
                        : [],
                }),
            }
            : {}))), more);
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.sendInvoice');
        throw new Error_1.default(error.message, 'telegram.sendInvoice', `${chatId},${JSON.stringify((0, CleanObject_1.toJSON)(invoice))}${more ? ',' + JSON.stringify((0, CleanObject_1.toJSON)(more)) : ''}`);
    }
}
exports.SendInvoice = SendInvoice;
