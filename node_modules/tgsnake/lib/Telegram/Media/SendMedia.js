"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendMedia = void 0;
const telegram_1 = require("telegram");
const ReplyMarkup_1 = require("../../Utils/ReplyMarkup");
const parser_1 = __importDefault(require("@tgsnake/parser"));
const big_integer_1 = __importDefault(require("big-integer"));
const Update = __importStar(require("../../Update"));
const ToBigInt_1 = require("../../Utils/ToBigInt");
const Error_1 = __importDefault(require("../../Context/Error"));
const parser = new parser_1.default(telegram_1.Api);
/**
 * Sending message media.
 * @param snakeClient - Client
 * @param {number|string|bigint} chatId - Chat/Groups/Channel id.
 * @param {Object} media - Message Media.
 * @param more - more parameters to use.
 */
async function SendMedia(snakeClient, chatId, media, more) {
    try {
        snakeClient.log.debug('Running telegram.sendMedia');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let parseMode = '';
        let [id, type, peer] = await (0, ToBigInt_1.toBigInt)(chatId, snakeClient);
        if (more) {
            if (more.parseMode) {
                parseMode = more.parseMode.toLowerCase();
                delete more.parseMode;
            }
        }
        let parseText;
        let entities = [];
        let replyMarkup;
        if (more) {
            if (more.entities) {
                snakeClient.log.debug('Building Entities');
                entities = (await parser.toRaw(snakeClient.client, more.entities));
                parseText = more.caption || '';
                delete more.entities;
            }
            if (more.caption && !more.entities) {
                snakeClient.log.debug('Building Entities');
                //@ts-ignore
                let [t, e] = parseMode !== '' ? parser.parse(more.caption, parseMode) : [more.caption, []];
                parseText = t;
                entities = (await parser.toRaw(snakeClient.client, e));
                delete more.caption;
            }
            if (more.replyMarkup) {
                snakeClient.log.debug('Building replyMarkup');
                replyMarkup = await (0, ReplyMarkup_1.BuildReplyMarkup)(more.replyMarkup, snakeClient);
                delete more.replyMarkup;
            }
        }
        return await createResults(await snakeClient.client.invoke(new telegram_1.Api.messages.SendMedia(Object.assign({ peer: peer, media: media, message: parseText || '', randomId: (0, big_integer_1.default)(-Math.floor(Math.random() * 10000000000000)), 
            //@ts-ignore
            entities: entities, replyMarkup: replyMarkup }, more))), snakeClient);
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.sendMedia');
        throw new Error_1.default(error.message, 'telegram.sendMedia', `${chatId},${JSON.stringify(media)}${more ? ',' + JSON.stringify(more) : ''}`);
    }
}
exports.SendMedia = SendMedia;
async function createResults(results, snakeClient) {
    snakeClient.log.debug('Creating results telegram.sendMedia');
    if (results instanceof telegram_1.Api.UpdateShortSentMessage) {
        results;
        let update = new Update.UpdateShortSentMessage();
        await update.init(results, snakeClient);
        return update;
    }
    if (results instanceof telegram_1.Api.Updates) {
        results;
        if (results.updates.length > 0) {
            for (let i = 0; i < results.updates.length; i++) {
                if (results.updates[i] instanceof telegram_1.Api.UpdateNewMessage) {
                    let arc = results.updates[i];
                    let update = new Update.UpdateNewMessage();
                    await update.init(arc, snakeClient);
                    return update;
                }
                if (results.updates[i] instanceof telegram_1.Api.UpdateNewChannelMessage) {
                    let arc = results.updates[i];
                    let update = new Update.UpdateNewChannelMessage();
                    await update.init(arc, snakeClient);
                    return update;
                }
            }
        }
    }
}
