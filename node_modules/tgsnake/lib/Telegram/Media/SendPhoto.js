"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendPhoto = void 0;
const telegram_1 = require("telegram");
const SendMedia_1 = require("./SendMedia");
const UploadFile_1 = require("./UploadFile");
const tg_file_id_1 = require("tg-file-id");
const Medias = __importStar(require("../../Utils/Medias"));
const big_integer_1 = __importDefault(require("big-integer"));
const Error_1 = __importDefault(require("../../Context/Error"));
function clean(more) {
    if (more) {
        let purge = ['workers', 'onProgress'];
        for (let [key] of Object.entries(more)) {
            if (purge.includes(key))
                delete more[key];
        }
    }
    return more;
}
/**
 * Sending photo with fileId/file location/url/buffer.
 * @param snakeClient - client
 * @param {number|string|bigint} chatId - Chat/Groups/Channel id.
 * @param {string|Buffer|Object} fileId - FileId/File Location/Url/Buffer
 * @param {Object} more - more parameters to use.
 * ```ts
 * bot.on("message",async (ctx) => {
 *     if(ctx.media && ctx.media._ == "photo"){
 *         let results = await ctx.telegram.sendPhoto(ctx.chat.id,ctx.media.fileId)
 *         console.log(results)
 *     }
 * })
 * ```
 */
async function SendPhoto(snakeClient, chatId, fileId, more) {
    try {
        snakeClient.log.debug('Running telegram.sendPhoto');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        switch (fileId.constructor) {
            case Buffer:
                fileId;
                return await (0, SendMedia_1.SendMedia)(snakeClient, chatId, new telegram_1.Api.InputMediaUploadedPhoto({
                    //@ts-ignore
                    file: await (0, UploadFile_1.UploadFile)(snakeClient, fileId, {
                        workers: (more === null || more === void 0 ? void 0 : more.workers) || 1,
                        onProgress: more === null || more === void 0 ? void 0 : more.onProgress,
                    }),
                }), clean(more));
                break;
            case Medias.MediaPhoto:
                fileId;
                return await (0, SendMedia_1.SendMedia)(snakeClient, chatId, new telegram_1.Api.InputMediaPhoto({
                    id: new telegram_1.Api.InputPhoto({
                        //@ts-ignore
                        id: (0, big_integer_1.default)(String(fileId._id)),
                        //@ts-ignore
                        accessHash: (0, big_integer_1.default)(String(fileId._accessHash)),
                        //@ts-ignore
                        fileReference: Buffer.from(fileId._fileReference, 'hex'),
                    }),
                }), clean(more));
                break;
            case String:
                fileId;
                if (/^http/i.test(String(fileId)) || /^(\/|\.\.?\/|~\/)/i.test(String(fileId))) {
                    if (more && more.download) {
                        return await (0, SendMedia_1.SendMedia)(snakeClient, chatId, new telegram_1.Api.InputMediaUploadedPhoto({
                            //@ts-ignore
                            file: await (0, UploadFile_1.UploadFile)(snakeClient, fileId, {
                                workers: (more === null || more === void 0 ? void 0 : more.workers) || 1,
                                onProgress: more === null || more === void 0 ? void 0 : more.onProgress,
                            }),
                        }), clean(more));
                    }
                    return await (0, SendMedia_1.SendMedia)(snakeClient, chatId, new telegram_1.Api.InputMediaPhotoExternal({
                        //@ts-ignore
                        url: fileId,
                    }), clean(more));
                }
                else {
                    //@ts-ignore
                    let file = await (0, tg_file_id_1.decodeFileId)(fileId);
                    if (file.typeId !== 2)
                        throw new Error(`Invalid fileId. This fileId not for photos`);
                    return await (0, SendMedia_1.SendMedia)(snakeClient, chatId, new telegram_1.Api.InputMediaPhoto({
                        id: new telegram_1.Api.InputPhoto({
                            id: (0, big_integer_1.default)(String(file.id)),
                            accessHash: (0, big_integer_1.default)(String(file.access_hash)),
                            fileReference: Buffer.from(file.fileReference, 'hex'),
                        }),
                    }), clean(more));
                }
            default:
                throw new Error(`Couldn't resolve this fileId.`);
        }
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.sendPhoto');
        throw new Error_1.default(error.message, 'telegram.sendPhoto', `${chatId},${Buffer.isBuffer(fileId) ? `<Buffer ${fileId.toString('hex')}>` : JSON.stringify(fileId)}${more ? ',' + JSON.stringify(more) : ''}`);
    }
}
exports.SendPhoto = SendPhoto;
