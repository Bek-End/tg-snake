"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendPoll = void 0;
const telegram_1 = require("telegram");
const SendMedia_1 = require("./SendMedia");
const Medias = __importStar(require("../../Utils/Medias"));
const Error_1 = __importDefault(require("../../Context/Error"));
const parser_1 = __importDefault(require("@tgsnake/parser"));
const big_integer_1 = __importDefault(require("big-integer"));
const parser = new parser_1.default(telegram_1.Api);
function clean(more) {
    if (more) {
        let purge = [
            'closed',
            'publicVoters',
            'multipleChoice',
            'quiz',
            'closePeriod',
            'closeDate',
            'correctAnswers',
            'solution',
            'solutionEntities',
            'solutionParseMode',
        ];
        for (let [key] of Object.entries(more)) {
            if (purge.includes(key))
                delete more[key];
        }
    }
    return more;
}
/**
 * Sending Polling
 * @param snakeClient - Client
 * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
 * @param {Object} poll - polling
 * @param {Object} more - more parameters to use.
 * ```ts
 * bot.command("poll",async (ctx) => {
 *     let results = await ctx.telegram.sendPoll(ctx.chat.id,{
 *    question : "something"
 *    options : ["A","B"],
 *  })
 * })
 * ```
 */
async function SendPoll(snakeClient, chatId, poll, more) {
    try {
        snakeClient.log.debug('Running telegram.sendPoll');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        if (poll instanceof Medias.MediaPoll) {
            poll;
            let options = [];
            let correct = [];
            for (let answer of poll.answers) {
                if (answer.correct) {
                    correct.push(Buffer.from(answer.option));
                }
                options.push(new telegram_1.Api.PollAnswer({
                    text: answer.text,
                    option: Buffer.from(answer.option),
                }));
            }
            return await (0, SendMedia_1.SendMedia)(snakeClient, chatId, new telegram_1.Api.InputMediaPoll({
                poll: new telegram_1.Api.Poll({
                    id: (0, big_integer_1.default)(String(poll.id)),
                    closed: poll.closed,
                    publicVoters: poll.publicVoters,
                    multipleChoice: poll.multipleChoice,
                    quiz: poll.quiz,
                    question: poll.question,
                    answers: options,
                    closePeriod: poll.closePeriod,
                    closeDate: poll.closeDate,
                }),
                correctAnswers: correct,
                solution: poll.solution,
                solutionEntities: poll.solutionEntities
                    ? (await parser.toRaw(snakeClient.client, poll.solutionEntities))
                    : [],
            }), clean(more));
        }
        if (typeof poll == 'object' && poll.question && poll.options) {
            let options = [];
            let correct = [];
            let solutionEntities = undefined;
            let solution = undefined;
            for (let index in poll.options) {
                let answer = poll.options[index];
                if (more && more.correctAnswers !== undefined && more.correctAnswers == Number(index)) {
                    correct.push(Buffer.from(String(index)));
                }
                options.push(new telegram_1.Api.PollAnswer({
                    text: answer,
                    option: Buffer.from(String(index)),
                }));
            }
            if (more) {
                if (more.solution && more.solutionEntities) {
                    snakeClient.log.debug('Building Entities');
                    solutionEntities = (await parser.toRaw(snakeClient.client, more.solutionEntities));
                    solution = more.solution;
                }
                if (more.solution && more.solutionParseMode && !more.solutionEntities) {
                    let parseMode = String(more.solutionParseMode).toLowerCase();
                    //@ts-ignore
                    let [t, e] = parser.parse(more.solution, parseMode);
                    solution = t;
                    solutionEntities = (await parser.toRaw(snakeClient.client, e));
                }
            }
            return await (0, SendMedia_1.SendMedia)(snakeClient, chatId, new telegram_1.Api.InputMediaPoll({
                poll: new telegram_1.Api.Poll({
                    id: (0, big_integer_1.default)(0),
                    closed: more === null || more === void 0 ? void 0 : more.closed,
                    publicVoters: more === null || more === void 0 ? void 0 : more.publicVoters,
                    multipleChoice: more === null || more === void 0 ? void 0 : more.multipleChoice,
                    quiz: more === null || more === void 0 ? void 0 : more.quiz,
                    question: poll.question,
                    answers: options,
                    closePeriod: more === null || more === void 0 ? void 0 : more.closePeriod,
                    closeDate: more === null || more === void 0 ? void 0 : more.closeDate,
                }),
                correctAnswers: correct,
                solution: solution,
                solutionEntities: solutionEntities,
            }), clean(more));
        }
        throw new Error(`Couldn't resolve this poll.`);
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.sendPoll');
        throw new Error_1.default(error.message, 'telegram.sendPoll', `${chatId},${JSON.stringify(poll)}${more ? ',' + JSON.stringify(more) : ''}`);
    }
}
exports.SendPoll = SendPoll;
