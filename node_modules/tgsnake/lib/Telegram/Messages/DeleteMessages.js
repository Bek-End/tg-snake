"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteMessages = exports.ResultAffectedMessages = void 0;
const telegram_1 = require("telegram");
const ToBigInt_1 = require("../../Utils/ToBigInt");
const Error_1 = __importDefault(require("../../Context/Error"));
class ResultAffectedMessages {
    constructor(results) {
        this.pts = 0;
        this.ptsCount = 0;
        this.date = Math.floor(Date.now() / 1000);
        if (results instanceof telegram_1.Api.messages.AffectedMessages) {
            if (results.pts)
                this.pts = results.pts;
            if (results.ptsCount)
                this.ptsCount = results.ptsCount;
        }
        if (results instanceof telegram_1.Api.messages.AffectedHistory) {
            if (results.pts)
                this.pts = results.pts;
            if (results.ptsCount)
                this.ptsCount = results.ptsCount;
            if (results.offset)
                this.offset = results.offset;
        }
    }
}
exports.ResultAffectedMessages = ResultAffectedMessages;
/**
 * This method allow you to deletes messages by their identifiers
 * @param snakeClient - Client
 * @param {number|string|bigint} chatId - User or chat, where is the message located.
 * @param {Array} messageId - Message ID list which will be deleted.
 * ```ts
 * bot.command("delete", async (ctx) => {
 *     let results = await ctx.telegram.deleteMessages(ctx.chat.id,[ctx.id])
 *     return console.log(results)
 * })
 * ```
 */
async function DeleteMessages(snakeClient, chatId, messageId) {
    try {
        snakeClient.log.debug('Running telegram.deleteMessages');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let [id, type, peer] = await (0, ToBigInt_1.toBigInt)(chatId, snakeClient);
        if (type == 'channel' || type == 'supergroup') {
            return new ResultAffectedMessages(await snakeClient.client.invoke(new telegram_1.Api.channels.DeleteMessages({
                channel: peer,
                id: messageId,
            })));
        }
        else {
            return new ResultAffectedMessages(await snakeClient.client.invoke(new telegram_1.Api.messages.DeleteMessages({
                revoke: true,
                id: messageId,
            })));
        }
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.deleteMessages');
        throw new Error_1.default(error.message, 'telegram.deleteMessages', `${chatId},${JSON.stringify(messageId)}`);
    }
}
exports.DeleteMessages = DeleteMessages;
