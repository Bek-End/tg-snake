"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportMessageLink = void 0;
const telegram_1 = require("telegram");
const ToBigInt_1 = require("../../Utils/ToBigInt");
const Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Get link and embed info of a message in a channel/supergroup
 * @param snakeClient - client
 * @param {number|string|bigint} chatId - supergroup/channel id.
 * @param {number} messageId - message id.
 * @param {Object} more - more paramaters to use.
 */
async function ExportMessageLink(snakeClient, chatId, messageId, more) {
    try {
        snakeClient.log.debug('Running telegram.exportMessageLink');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let [id, type, peer] = await (0, ToBigInt_1.toBigInt)(chatId, snakeClient);
        return snakeClient.client.invoke(new telegram_1.Api.channels.ExportMessageLink(Object.assign({ channel: peer, id: messageId }, more)));
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.exportMessageLink');
        throw new Error_1.default(error.message, 'telegram.exportMessageLink', `${chatId},${messageId}${more ? ',' + JSON.stringify(more) : ''}`);
    }
}
exports.ExportMessageLink = ExportMessageLink;
