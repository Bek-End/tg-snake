"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForwardMessages = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const telegram_1 = require("telegram");
const big_integer_1 = __importDefault(require("big-integer"));
const ToBigInt_1 = require("../../Utils/ToBigInt");
const Update = __importStar(require("../../Update"));
const Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Forwards messages by their IDs.
 * @param snakeClient - client
 * @param {number|string|bigint} chatId - Destination.
 * @param {number|string|bigint} fromChatId - Source of messages.
 * @param {Array} messageId - IDs of messages which will forwarded.
 * @param {Object} more - more paramaters to use.
 * ```ts
 * bot.command("forward", async (ctx) => {
 *     let results = await ctx.telegram.forwardMessages(ctx.chat.id,ctx.chat.id,[ctx.id])
 *     return console.log(results)
 * })
 * ```
 */
async function ForwardMessages(snakeClient, chatId, fromChatId, messageId, more) {
    try {
        snakeClient.log.debug('Running telegram.forwardMessages');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        if (typeof fromChatId === 'number')
            snakeClient.log.warning('Type of fromChatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let randomId = [];
        for (let i = 0; i < messageId.length; i++) {
            snakeClient.log.debug('Building randomId');
            randomId.push((0, big_integer_1.default)(Math.floor(Math.random() * 10000000000000)));
        }
        let [id, type, peer] = await (0, ToBigInt_1.toBigInt)(chatId, snakeClient);
        let [fId, fType, fPeer] = await (0, ToBigInt_1.toBigInt)(fromChatId, snakeClient);
        let results = await snakeClient.client.invoke(new telegram_1.Api.messages.ForwardMessages(Object.assign({ fromPeer: fPeer, toPeer: peer, id: messageId, randomId: randomId }, more)));
        return await createResults(results, snakeClient);
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.forwardMessages');
        throw new Error_1.default(error.message, 'telegram.forwardMessages', `${chatId},${fromChatId},${JSON.stringify(messageId)},${more ? JSON.stringify(more, null, 2) : ''}`);
    }
}
exports.ForwardMessages = ForwardMessages;
async function createResults(results, snakeClient) {
    var _a;
    snakeClient.log.debug('Creating results telegram.forwardMessages');
    if (results instanceof telegram_1.Api.Updates) {
        results;
        if (((_a = results.updates) === null || _a === void 0 ? void 0 : _a.length) > 0) {
            for (let i = 0; i < results.updates.length; i++) {
                if (results.updates[i] instanceof telegram_1.Api.UpdateNewMessage) {
                    let arc = results.updates[i];
                    let update = new Update.UpdateNewMessage();
                    await update.init(arc, snakeClient);
                    return update;
                }
                if (results.updates[i] instanceof telegram_1.Api.UpdateNewChannelMessage) {
                    let arc = results.updates[i];
                    let res = new Update.UpdateNewChannelMessage();
                    await res.init(arc, snakeClient);
                    return res;
                }
            }
        }
    }
}
