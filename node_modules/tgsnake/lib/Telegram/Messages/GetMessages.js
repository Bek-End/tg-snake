"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultsGetMessage = exports.GetMessages = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const telegram_1 = require("telegram");
const MessageContext_1 = require("../../Context/MessageContext");
const ToBigInt_1 = require("../../Utils/ToBigInt");
const Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Returns the list of messages by their IDs.
 * @param snakeClient - Client
 * @param {bigint|number|string} chatId - Chat/Groups/Channel id.
 * @param {Array} messageId - Message Id.
 * @param {boolean} replies - if `true` it will getting the nested reply. and will making floodwait.
 * ```ts
 *   bot.command("getMessages",async (ctx)=>{
 *       let results = await ctx.telegram.getMessages(ctx.chat.id,[ctx.id])
 *       console.log(results)
 *   })
 * ```
 */
async function GetMessages(snakeClient, chatId, messageId, replies = false) {
    try {
        snakeClient.log.debug('Running telegram.getMessages');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let messageIds = messageId;
        let [id, type, peer] = await (0, ToBigInt_1.toBigInt)(chatId, snakeClient);
        if (type == 'channel' || type == 'supergroup') {
            let results = await snakeClient.client.invoke(new telegram_1.Api.channels.GetMessages({
                channel: peer,
                id: messageIds,
            }));
            let final = new ResultsGetMessage();
            await final.init(results, snakeClient, replies);
            return final;
        }
        else {
            let results = await snakeClient.client.invoke(new telegram_1.Api.messages.GetMessages({
                id: messageIds,
            }));
            let final = new ResultsGetMessage();
            await final.init(results, snakeClient, replies);
            return final;
        }
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.getMessages');
        throw new Error_1.default(error.message, 'telegram.getMessages', `${chatId},${JSON.stringify(messageId)}`);
    }
}
exports.GetMessages = GetMessages;
class ResultsGetMessage {
    constructor() {
        this.date = Math.floor(Date.now() / 1000);
    }
    async init(results, SnakeClient, replies = false) {
        SnakeClient.log.debug('Creating results telegram.getMessages');
        let tempMessages = [];
        if (results instanceof telegram_1.Api.messages.ChannelMessages) {
            for (let i = 0; i < results.messages.length; i++) {
                let msg = results.messages[i];
                if (!replies) {
                    delete msg.replyTo;
                }
                let msgc = new MessageContext_1.MessageContext();
                await msgc.init(msg, SnakeClient);
                tempMessages.push(msgc);
            }
        }
        if (results instanceof telegram_1.Api.messages.Messages) {
            for (let i = 0; i < results.messages.length; i++) {
                let msg = results.messages[i];
                if (!replies) {
                    delete msg.replyTo;
                }
                let msgc = new MessageContext_1.MessageContext();
                await msgc.init(msg, SnakeClient);
                tempMessages.push(msgc);
            }
        }
        this.messages = tempMessages;
        return this;
    }
}
exports.ResultsGetMessage = ResultsGetMessage;
