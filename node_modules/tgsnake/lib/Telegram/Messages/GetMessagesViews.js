"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMessagesViews = exports.Views = exports.ResultsMessagesViews = void 0;
const telegram_1 = require("telegram");
const ToBigInt_1 = require("../../Utils/ToBigInt");
const Error_1 = __importDefault(require("../../Context/Error"));
class ResultsMessagesViews {
    constructor(results) {
        this.date = Math.floor(Date.now() / 1000);
        if ((results === null || results === void 0 ? void 0 : results.views.length) > 0) {
            let tempViews = new Array();
            for (let i = 0; i < results.views.length; i++) {
                let msg = results.views[i];
                tempViews.push(new Views(msg));
            }
            this.views = tempViews;
        }
    }
}
exports.ResultsMessagesViews = ResultsMessagesViews;
class Views {
    constructor(getMessagesViews) {
        if (getMessagesViews.views) {
            this.views = getMessagesViews.views;
        }
        if (getMessagesViews.forwards) {
            this.forwards = getMessagesViews.forwards;
        }
        if (getMessagesViews.replies) {
            this.replies = getMessagesViews.replies;
        }
    }
}
exports.Views = Views;
/**
 * Get and increase the view counter of a message sent or forwarded from a channel.
 * @param snakeClient - Client
 * @param {number|string|bigint} chatId - Where the message was found.
 * @param {Array} messageId - IDs of message.
 * @param {boolean} increment - Whether to mark the message as viewed and increment the view counter
 * ```ts
 * bot.command("getMessagesViews",async (ctx)=>{
 *     let results = await ctx.telegram.getMessagesViews(ctx.chat.id,[ctx.id])
 *     console.log(results)
 * })
 * ```
 */
async function GetMessagesViews(snakeClient, chatId, messageId, increment = false) {
    try {
        snakeClient.log.debug('Running telegram.getMessagesViews');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let [id, type, peer] = await (0, ToBigInt_1.toBigInt)(chatId, snakeClient);
        return new ResultsMessagesViews(await snakeClient.client.invoke(new telegram_1.Api.messages.GetMessagesViews({
            peer: peer,
            id: messageId,
            increment: increment,
        })));
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.getMessagesViews');
        throw new Error_1.default(error.message, 'telegram.getMessagesViews', `${chatId},${JSON.stringify(messageId)},${increment}`);
    }
}
exports.GetMessagesViews = GetMessagesViews;
