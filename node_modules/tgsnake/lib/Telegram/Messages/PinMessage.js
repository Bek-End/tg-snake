"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinMessage = void 0;
const telegram_1 = require("telegram");
const Updates = __importStar(require("../../Update"));
const ToBigInt_1 = require("../../Utils/ToBigInt");
const Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Pin or unpin a message.
 * @param snakeClient - Client
 * @param {number|string|bigint} chatId - where to pin or unpin the message.
 * @param {number} messageId - The message to pin or unpin
 * @param {Object} more - more parameter for PinMessage
 * ```ts
 * bot.command("pin",async (ctx)=>{
 *     let results = await ctx.telegram.pinMessage(ctx.chat.id,ctx.id)
 *     console.log(results)
 * })
 * // unpin a message
 * bot.command("unpin",async (ctx)=>{
 *     if(ctx.replyToMessage){
 *         let results = await ctx.telegram.unpinMessage(ctx.chat.id,ctx.replyToMessage.id)
 *         console.log(results)
 *     }
 * })
 * ```
 */
async function PinMessage(snakeClient, chatId, messageId, more) {
    try {
        snakeClient.log.debug('Running telegram.pinMessage');
        if (typeof chatId === 'number')
            snakeClient.log.warning('Type of chatId is number, please switch to BigInt or String for security Ids 64 bit int.');
        let [id, type, peer] = await (0, ToBigInt_1.toBigInt)(chatId, snakeClient);
        let results = await snakeClient.client.invoke(new telegram_1.Api.messages.UpdatePinnedMessage(Object.assign({ peer: peer, id: messageId }, more)));
        return await generateResults(results, snakeClient);
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.pinMessage');
        throw new Error_1.default(error.message, 'telegram.pinMessage', `${chatId},${messageId}${more ? ',' + JSON.stringify(more) : ''}`);
    }
}
exports.PinMessage = PinMessage;
async function generateResults(results, SnakeClient) {
    SnakeClient.log.debug('Running telegram.pinMessage');
    if (results instanceof telegram_1.Api.Updates) {
        results;
        if (results.updates.length > 0) {
            for (let i = 0; i < results.updates.length; i++) {
                let update = results.updates[i];
                if (update instanceof telegram_1.Api.UpdateNewMessage) {
                    update;
                    let res = new Updates.UpdateNewMessage();
                    await res.init(update, SnakeClient);
                    return res;
                }
                if (update instanceof telegram_1.Api.UpdateNewChannelMessage) {
                    update;
                    let res = new Updates.UpdateNewChannelMessage();
                    await res.init(update, SnakeClient);
                    return res;
                }
                if (update instanceof telegram_1.Api.UpdatePinnedMessages) {
                    update;
                    //todo
                    // using Updates.UpdatePinnedMessages
                    return update;
                }
                if (update instanceof telegram_1.Api.UpdatePinnedChannelMessages) {
                    update;
                    //todo
                    //using Updates.UpdatePinnedChannelMessage
                    return update;
                }
            }
        }
    }
}
