"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadMessageContents = void 0;
const telegram_1 = require("telegram");
const DeleteMessages_1 = require("./DeleteMessages");
const Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Notifies the sender about the recipient having listened a voice message or watched a video.
 * @param snakeClient - Client
 * @param {Array} messageId - message ids
 * ```ts
 * bot.on("message",async (ctx)=>{
 *     if(ctx.media){
 *         let results = await ctx.telegram.readMessageContents([ctx.id])
 *         console.log(results)
 *     }
 * })
 * ```
 */
async function ReadMessageContents(snakeClient, messageId) {
    try {
        snakeClient.log.debug('Running telegram.readMessageContents');
        return new DeleteMessages_1.ResultAffectedMessages(await snakeClient.client.invoke(new telegram_1.Api.messages.ReadMessageContents({
            id: messageId,
        })));
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.readMessageContents');
        throw new Error_1.default(error.message, 'telegram.readMessageContents', `${JSON.stringify(messageId)}`);
    }
}
exports.ReadMessageContents = ReadMessageContents;
