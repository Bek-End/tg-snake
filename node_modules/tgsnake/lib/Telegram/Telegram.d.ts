/// <reference types="node" />
/// <reference types="node" />
import { Api } from 'telegram';
import { inspect } from 'util';
import * as Utils from '../Utils';
import * as Users from './Users';
import * as Bots from './Bots';
import * as Media from './Media';
import * as Messages from './Messages';
import * as Chats from './Chats';
import * as Client from '../Client';
import * as Interface from '../Interface';
export declare class Telegram {
    /** @hidden */
    private _SnakeClient;
    constructor(SnakeClient: Client.Snake);
    /** @hidden */
    [inspect.custom](): {
        [key: string]: any;
    };
    /** @hidden */
    toJSON(): {
        [key: string]: any;
    };
    get SnakeClient(): Client.Snake<{}>;
    get snakeClient(): Client.Snake<{}>;
    getEntity(chatId: bigint | string | number, useCache?: boolean): Promise<Users.ResultGetEntity>;
    getMe(): Promise<Users.ResultGetEntity>;
    sendMessage(chatId: bigint | number | string, text: string, more?: Messages.sendMessageMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * This method allow you to deletes messages by their identifiers
     * @param {number|string|bigint} chatId - User or chat, where is the message located.
     * @param {Array} messageId - Message ID list which will be deleted.
     * ```ts
     * bot.command("delete", async (ctx) => {
     *     let results = await ctx.telegram.deleteMessages(ctx.chat.id,[ctx.id])
     *     return console.log(results)
     * })
     * ```
     */
    deleteMessages(chatId: bigint | number | string, messageId: number[]): Promise<Messages.ResultAffectedMessages>;
    /**
     * This method allow you to delete message by their identifiers
     * @param {number|string|bigint} chatId - User or chat, where is the message located.
     * @param {number} messageId - Message ID which will be deleted.
     * ```ts
     * bot.command("delete", async (ctx) => {
     *     let results = await ctx.telegram.deleteMessages(ctx.chat.id,ctx.id)
     *     return console.log(results)
     * })
     * ```
     */
    deleteMessage(chatId: bigint | number | string, messageId: number): Promise<Messages.ResultAffectedMessages>;
    /**
     * This method allow you to edit a message.
     * @param snakeClient - Client
     * @param {number|string|bigint} chatId - Chat/Groups/Channel id.
     * @param {number} messageId - Message id to be edited.
     * @param {string} text - New Message/Caption. You can pass with blank string (`""`) if you want to edit media.
     * @param {Object} more - more parameters to use.
     */
    editMessage(chatId: bigint | number | string, messageId: number, text: string, more?: Messages.editMessageMoreParams): Promise<import("../Update").UpdateEditChannelMessage | import("../Update").UpdateEditMessage | undefined>;
    /**
     * Forwards messages by their IDs.
     * @param {number|string|bigint} chatId - Destination.
     * @param {number|string|bigint} fromChatId - Source of messages.
     * @param {Array} messageId - IDs of messages which will forwarded.
     * @param {Object} more - more paramaters to use.
     * ```ts
     * bot.command("forward", async (ctx) => {
     *     let results = await ctx.telegram.forwardMessages(ctx.chat.id,ctx.chat.id,[ctx.id])
     *     return console.log(results)
     * })
     * ```
     */
    forwardMessages(chatId: bigint | number | string, fromChatId: bigint | number | string, messageId: number[], more?: Messages.forwardMessageMoreParams): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Forward message by their IDs.
     * @param {number|string|bigint} chatId - Destination.
     * @param {number|string|bigint} fromChatId - Source of messages.
     * @param {number} messageId - ID of messages which will forwarded.
     * @param {Object} more - more paramaters to use.
     * ```ts
     * bot.command("forward", async (ctx) => {
     *     let results = await ctx.telegram.forwardMessages(ctx.chat.id,ctx.chat.id,ctx.id)
     *     return console.log(results)
     * })
     * ```
     */
    forwardMessage(chatId: bigint | number | string, fromChatId: bigint | number | string, messageId: number, more?: Messages.forwardMessageMoreParams): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Returns the list of messages by their IDs.
     * @param {bigint|number|string} chatId - Chat/Groups/Channel id.
     * @param {Array} messageId - Message Id.
     * @param {boolean} replies - if `true` it will getting the nested reply. and will making floodwait.
     * ```ts
     *   bot.command("getMessages",async (ctx)=>{
     *       let results = await ctx.telegram.getMessages(ctx.chat.id,[ctx.id])
     *       console.log(results)
     *   })
     * ```
     */
    getMessages(chatId: bigint | number | string, messageId: number[], replies?: boolean): Promise<Messages.ResultsGetMessage>;
    /**
     * Get and increase the view counter of a message sent or forwarded from a channel.
     * @param {number|string|bigint} chatId - Where the message was found.
     * @param {Array} messageId - IDs of message.
     * @param {boolean} increment - Whether to mark the message as viewed and increment the view counter
     * ```ts
     * bot.command("getMessagesViews",async (ctx)=>{
     *     let results = await ctx.telegram.getMessagesViews(ctx.chat.id,[ctx.id])
     *     console.log(results)
     * })
     * ```
     */
    getMessagesViews(chatId: bigint | number | string, messageId: number[], increment?: boolean): Promise<Messages.ResultsMessagesViews>;
    /**
     * Getting all user profile photos.
     * @param {number|string|bigint} userId - id of user.
     * @param {Object} more - more object for getUserPhotos
     * ```ts
     * bot.command("getUserPhotos",async (ctx)=>{
     *     let results = await ctx.telegram.getUserPhotos(ctx.from.id)
     *     console.log(results)
     * })
     * ```
     */
    getUserPhotos(chatId: bigint | number | string, more?: Users.getUserPhotosMoreParams): Promise<Api.photos.TypePhotos>;
    /**
     * Marks message history as read.
     * @param {bigint|number|string} chatId - Target user or group.
     * @param {Object} more - more parameter for ReadHistory.
     * ```ts
     * bot.command("readHistory",async (ctx)=>{
     *     let results = await ctx.telegram.readHistory(ctx.chat.id,ctx.id)
     *     console.log(results)
     * })
     * ```
     */
    readHistory(chatId: bigint | number | string, more?: Messages.readHistoryMoreParams): Promise<Messages.ResultAffectedMessages>;
    /**
     * Mark mentions as read.
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * ```ts
     * bot.command("readMentions",async (ctx)=>{
     *     let results = await ctx.telegram.readMentions(ctx.chat.id)
     *     console.log(results)
     * })
     * ```
     */
    readMentions(chatId: bigint | number | string): Promise<Messages.ResultAffectedMessages>;
    /**
     * Notifies the sender about the recipient having listened a voice message or watched a video.
     * @param {Array} messageId - message ids
     * ```ts
     * bot.on("message",async (ctx)=>{
     *     if(ctx.media){
     *         let results = await ctx.telegram.readMessageContents([ctx.id])
     *         console.log(results)
     *     }
     * })
     * ```
     */
    readMessageContents(messageId: number[]): Promise<Messages.ResultAffectedMessages>;
    /**
     * Unpin all message in chats.
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * ```ts
     * bot.command("unpinAll",async (ctx)=>{
     *     let results = await ctx.telegram.unpinAllMessages(ctx.chat.id)
     *     console.log(results)
     * })
     * ```
     */
    unpinAllMessages(chatId: bigint | number | string): Promise<Messages.ResultAffectedMessages>;
    /**
     * Pin or unpin a message.
     * @param {number|string|bigint} chatId - where to pin or unpin the message.
     * @param {number} messageId - The message to pin or unpin
     * @param {Object} more - more parameter for PinMessage
     * ```ts
     * bot.command("pin",async (ctx)=>{
     *     let results = await ctx.telegram.pinMessage(ctx.chat.id,ctx.id)
     *     console.log(results)
     * })
     * // unpin a message
     * bot.command("unpin",async (ctx)=>{
     *     if(ctx.replyToMessage){
     *         let results = await ctx.telegram.unpinMessage(ctx.chat.id,ctx.replyToMessage.id)
     *         console.log(results)
     *     }
     * })
     * ```
     */
    pinMessage(chatId: bigint | number | string, messageId: number, more?: Messages.pinMessageMoreParams): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | Api.UpdatePinnedMessages | Api.UpdatePinnedChannelMessages | undefined>;
    /**
     * unpin a message.
     * @param {number|string|bigint} chatId - where to pin or unpin the message.
     * @param {number} messageId - The message to pin or unpin
     * ```ts
     * bot.command("unpin",async (ctx)=>{
     *     if(ctx.replyToMessage){
     *         let results = await ctx.telegram.unpinMessage(ctx.chat.id,ctx.replyToMessage.id)
     *         console.log(results)
     *     }
     * })
     * ```
     */
    unpinMessage(chatId: bigint | number | string, messageId: number): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | Api.UpdatePinnedMessages | Api.UpdatePinnedChannelMessages | undefined>;
    /**
     * This method allow you to deletes communication history.
     * @param {string|number|bigint} chatId - User or chat, communication history of which will be deleted.
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("clear", async (ctx) => {
     *     let results = await ctx.telegram.deleteHistory(ctx.chat.id)
     *     return console.log(results)
     * })
     * ```
     */
    deleteHistory(chatId: bigint | number | string, more?: Messages.deleteHistoryMoreParams): Promise<Api.TypeUpdates | Messages.ResultAffectedMessages>;
    /**
     * Delete all messages sent by a certain user in a supergroup
     * @param {number|string|bigint} chatId - supergroup id.
     * @param {number|string|bigint} userId - User whose messages should be deleted.
     * ```ts
     * bot.command("deleteMe", async (ctx) => {
     *     let results = await ctx.telegram.deleteUserHistory(ctx.chat.id,ctx.from.id)
     *     return console.log(results)
     * })
     * ```
     */
    deleteUserHistory(chatId: bigint | number | string, userId: number | string): Promise<Messages.ResultAffectedMessages>;
    /**
     * Modify the admin rights of a user in a supergroup/channel.
     * @param {bigint|number|string} chatId - Chat/Channel/Group id.
     * @param {bigint|number|string} userId - User id.
     * @param {Object} - more parameters to use.
     *```ts
     * bot.command("promote",async (ctx) => {
     *    if((!ctx.chat.private) && ctx.replyToMessage){
     *        let results = await ctx.telegram.editAdmin(ctx.chat.id,ctx.replyToMessage.from.id)
     *        console.log(results)
     *    }
     * })
     *```
     * This method will return UpdateNewMessage or UpdateNewChannelMessage if success.
     */
    editAdmin(chatId: bigint | number | string, userId: bigint | number | string, more?: Chats.editAdminMoreParams): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Ban/unban/kick a user in a supergroup/channel.
     * @param {number|bigint|string} chatId - Chat/Group/Channel id.
     * @param {number|bigint|string} userId - User id.
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("ban",async (ctx) => {
     * if((!ctx.chat.private) && ctx.replyToMessage){
     *   let results = await ctx.telegram.editBanned(ctx.chat.id,ctx.replyToMessage.from.id)
     *   console.log(results)
     * }
     * })
     * ```
     * This method will return UpdateNewMessage or UpdateNewChannelMessage. if success.
     */
    editBanned(chatId: bigint | number | string, userId: bigint | number | string, more?: Chats.editBannedMoreParams): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Change the profile picture of chat.
     * @param {number|string|bigint} chatId - Chat/Groups/Channel which will change the profile picture.
     * @param {string|Buffer} photo - The location where the file is located/Url/The buffer of the file.
     * ```ts
     * bot.command("editPhoto", async (ctx)=>{
     *     if(!ctx.chat.private){
     *         let results = await ctx.telegram.editPhoto(ctx.chat.id,"https://tgsnake.js.org/images/tgsnake.jpg")
     *         console.log(results)
     *     }
     * })
     * ```
     */
    editPhoto(chatId: bigint | number | string, photo: string | Buffer): Promise<Api.TypeUpdates | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * edit chat/group/channel title.
     * @param {bigint|number|string} chatId - Chat/Groups/Channel id.
     * @param {string} title - New title.
     * ```ts
     * bot.command("editTitle",async (ctx) => {
     *    if(!ctx.chat.private){
     *        let results = await ctx.telegram.editTitle(ctx.chat.id,"hey new title")
     *        console.log(results)
     *    }
     * })
     * ```
     * This method will return UpdateNewMessage or UpdateNewChannelMessage. if success.
     */
    editTitle(chatId: bigint | number | string, title: string): Promise<Api.TypeUpdates | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Get link and embed info of a message in a channel/supergroup
     * @param {number|string|bigint} chatId - supergroup/channel id.
     * @param {number} messageId - message id.
     * @param {Object} more - more paramaters to use.
     */
    exportMessageLink(chatId: bigint | number | string, messageId: number, more?: Messages.exportMessageLinkMoreParams): Promise<Api.ExportedMessageLink>;
    /**
     * Get channels/supergroups/geogroups we're admin in. Usually called when the user exceeds the limit for owned public channels/supergroups/geogroups, and the user is given the choice to remove one of his channels/supergroups/geogroups.
     * @param {boolean} byLocation - Get geogroups.
     * @param {boolean} checkLimit - If set and the user has reached the limit of owned public channels/supergroups/geogroups, instead of returning the channel list one of the specified errors will be returned. <br/>
     * Useful to check if a new public channel can indeed be created, even before asking the user to enter a channel username to use in channels.checkUsername/channels.updateUsername.
     * ```ts
     * bot.command("getAdminedPublicChannels",async (ctx) => {
     *    if(!ctx.chat.private){
     *        let results = await ctx.telegram.getAdminedPublicChannels()
     *        console.log(results)
     *    }
     * })
     * ```
     */
    getAdminedPublicChannels(byLocation?: boolean, checkLimit?: boolean): Promise<Api.messages.TypeChats>;
    /**
     * Get the admin log of a channel/supergroup.
     * @param snakeClient - Client
     * @param {number|string|bigint} chatId -  Chat/Channel/Group id.
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("getAdminLog",async (ctx) => {
     *     if(!ctx.chat.private){
     *        let results = await ctx.telegram.getAdminLog(ctx.chat.id)
     *        console.log(results)
     *     }
     * })
     * ```
     */
    getAdminLog(chatId: bigint | number | string, more?: Chats.getAdminLogMoreParams): Promise<Chats.ClassResultGetAdminLog>;
    /**
     * Get info about channels/supergroups.
     * @param {Array} chatId - List of channel ids.
     * ```ts
     * bot.command("getChannels",async (ctx) => {
     *     let results = await ctx.telegram.getChannels([ctx.chat.id])
     *     console.log(results)
     * })
     * ```
     */
    getChannels(chatId: bigint[] | number[] | string[]): Promise<Api.messages.TypeChats>;
    /**
     * Returns full chat/channel info according to its ID.
     * @param {number|string|bigint} chatId - Chat/Groups/Channel id.
     * ```ts
     * bot.command("getFullChat",async (ctx) => {
     *     let results = await ctx.telegram.getFullChat(ctx.chat.id)
     * })
     * ```
     */
    getFullChat(chatId: bigint | number | string): Promise<Api.messages.ChatFull>;
    /**
     * Get all groups that can be used as discussion groups.<br/>
     * Returned legacy group chats must be first upgraded to supergroups before they can be set as a discussion group.<br/>
     * To set a returned supergroup as a discussion group, access to its old messages must be enabled using channels.togglePreHistoryHidden, first. <br/>
     * ```ts
     * bot.command("getGroupsForDiscussion",async (ctx) => {
     *     let results = await ctx.telegram.getGroupsForDiscussion()
     *     console.log(results)
     * })
     * ```
     */
    getGroupsForDiscussion(): Promise<Api.messages.TypeChats>;
    /**
     * Get inactive channels and supergroups.
     * ```ts
     * bot.command("getInactiveChannels",async (ctx) => {
     *     let results = await ctx.telegram.getInactiveChannels()
     *     console.log(results)
     * })
     * ```
     */
    getInactiveChannels(): Promise<Api.messages.InactiveChats>;
    /**
     * Get a list of channels/supergroups we left.
     * @param {number} offset - offset of pagination.
     * ```ts
     * bot.command("getLeftChannels",async (ctx) => {
     *     let results = await ctx.telegram.getLeftChannels()
     *     console.log(results)
     * })
     * ```
     */
    getLeftChannels(offset?: number): Promise<Api.messages.TypeChats>;
    /**
     * Sending message media.
     * @param {number|string|bigint} chatId - Chat/Groups/Channel id.
     * @param {Object} media - Message Media.
     * @param more - more parameters to use.
     */
    sendMedia(chatId: bigint | number | string, media: Api.TypeInputMedia, more?: Media.sendMediaMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending photo with fileId/file location/url/buffer.
     * @param {number|string|bigint} chatId - Chat/Groups/Channel id.
     * @param {string|Buffer|Object} fileId - FileId/File Location/Url/Buffer
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.on("message",async (ctx) => {
     *     if(ctx.media && ctx.media._ == "photo"){
     *         let results = await ctx.telegram.sendPhoto(ctx.chat.id,ctx.media.fileId)
     *         console.log(results)
     *     }
     * })
     * ```
     */
    sendPhoto(chatId: bigint | number | string, fileId: string | Buffer | Utils.Medias.MediaPhoto, more?: Media.sendPhotoMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending Document file location/url/buffer.
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {string|Buffer|Object} fileId - File Location/Url/Buffer .
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("doc",async (ctx) => {
     *     let results = await ctx.telegram.sendDocument(ctx.chat.id,"https://tgsnake.js.org/images/tgsnake.jpg")
     * })
     * ```
     */
    sendDocument(chatId: bigint | number | string, fileId: string | Buffer | Utils.Medias.TypeMessageMediaDocument, more?: Media.sendDocumentMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending sticker with fileId/file location/url/buffer.
     * @param {bigint|number|string} chatId - Chat/Groups/Channel id.
     * @param {string|Buffer|Object} fileId - Path file/FileId/Buffer.
     * ```ts
     * bot.on("message",async (ctx) => {
     *     if(ctx.media && ctx.media._ == "sticker"){
     *         let results = await ctx.telegram.sendSticker(ctx.chat.id,ctx.media.fileId)
     *         console.log(results)
     *     }
     * })
     * ```
     */
    sendSticker(chatId: bigint | number | string, fileId: string | Buffer | Utils.Medias.MediaSticker): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending Video
     * @param snakeClient - Client
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {string|Buffer} fileId - File Location/Url/Buffer .
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("vid",async (ctx) => {
     *     let results = await ctx.telegram.sendVideo(ctx.chat.id,"https://file-examples-com.github.io/uploads/2017/04/file_example_MP4_480_1_5MG.mp4")
     * })
     * ```
     */
    sendVideo(chatId: bigint | number | string, fileId: string | Buffer | Utils.Medias.MediaVideo, more?: Media.sendVideoMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending VideoNote (rounded video)
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {string|Buffer} fileId - File Location/Url/Buffer .
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("vidnote",async (ctx) => {
     *     let results = await ctx.telegram.sendVideoNote(ctx.chat.id,"file id here")
     * })
     * ```
     */
    sendVideoNote(chatId: bigint | number | string, fileId: string | Buffer | Utils.Medias.MediaVideoNote, more?: Media.sendVideoNoteMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending Animation
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {string|Buffer} fileId - File Location/Url/Buffer .
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("ani",async (ctx) => {
     *     let results = await ctx.telegram.sendAnimation(ctx.chat.id,"file id here")
     * })
     * ```
     */
    sendAnimation(chatId: bigint | number | string, fileId: string | Buffer | Utils.Medias.MediaAnimation, more?: Media.sendAnimationMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending Audio
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {string|Buffer} fileId - File Location/Url/Buffer .
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("au",async (ctx) => {
     *     let results = await ctx.telegram.sendAudio(ctx.chat.id,"file id here")
     * })
     * ```
     */
    sendAudio(chatId: bigint | number | string, fileId: string | Buffer | Utils.Medias.MediaAudio, more?: Media.sendAudioMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending Voice
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {string|Buffer} fileId - File Location/Url/Buffer .
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("voice",async (ctx) => {
     *     let results = await ctx.telegram.sendVoice(ctx.chat.id,"file id here")
     * })
     * ```
     */
    sendVoice(chatId: bigint | number | string, fileId: string | Buffer | Utils.Medias.MediaVoice, more?: Media.sendVoiceMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    sendDice(chatId: bigint | number | string, dice: string | Utils.Medias.MediaDice, more?: Media.defaultSendMediaMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending Contact
     * @param snakeClient - Client
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {Object} contact - contact.
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("contact",async (ctx) => {
     *     let results = await ctx.telegram.sendContact(ctx.chat.id,{
     *    firstName : "someone",
     *    lastName : "",
     *    phoneNumber : "1234567890",
     *    vcard : "something info"
     *  })
     * })
     * ```
     */
    sendContact(chatId: bigint | number | string, contact: Media.InterfaceContact | Utils.Medias.MediaContact, more?: Media.defaultSendMediaMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending Polling
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {Object} poll - polling
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("poll",async (ctx) => {
     *     let results = await ctx.telegram.sendPoll(ctx.chat.id,{
     *    question : "something"
     *    options : ["A","B"],
     *  })
     * })
     * ```
     */
    sendPoll(chatId: bigint | number | string, poll: Media.InterfacePoll | Utils.Medias.MediaPoll, more?: Media.sendPollMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending Location
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {Object} location - location
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("loc",async (ctx) => {
     *     let results = await ctx.telegram.sendLocation(ctx.chat.id,{
     *    latitude : 0,
     *    longitude : 0
     *  })
     * })
     * ```
     */
    sendLocation(chatId: bigint | number | string, location: Media.InterfaceLocation | Utils.Medias.MediaLocation, more?: Media.defaultSendMediaMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Sending Venue
     * @param {string|number|bigint} chatId - Chat/Groups/Channel id.
     * @param {Object} venue - venue
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("venue",async (ctx) => {
     *     let results = await ctx.telegram.sendVenue(ctx.chat.id,{
     *    latitude : 0,
     *    longitude : 0,
     *    title : "title",
     *    address : "address",
     *    provider : "provider",
     *    id : "some id here",
     *    type : "some type here"
     *  })
     * })
     * ```
     */
    sendVenue(chatId: bigint | number | string, venue: Media.InterfaceVenue | Utils.Medias.MediaVenue, more?: Media.defaultSendMediaMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Get info about a channel/supergroup participant.
     * @param {number|string|bigint} - Chat or channels id to getting the list of members.
     * @param {number|string|bigint} - Participant to get info about.
     * ```ts
     * bot.command("getChatMember",async (ctx) => {
     *     let results = await ctx.telegram.getParticipant(ctx.chat.id,ctx.from.id) // getChatMember and getParticipant.is same methods.
     *     console.log(results)
     * })
     * ```
     */
    getParticipant(chatId: bigint | string | number, userId: string | number): Promise<Utils.TypeChatParticipant>;
    /**
     * Get info about a channel/supergroup participant.
     * @param {number|string|bigint} - Chat or channels id to getting the list of members.
     * @param {number|string|bigint} - Participant to get info about.
     * ```ts
     * bot.command("getChatMember",async (ctx) => {
     *     let results = await ctx.telegram.getParticipant(ctx.chat.id,ctx.from.id) // getChatMember and getParticipant.is same methods.
     *     console.log(results)
     * })
     * ```
     */
    getChatMember(chatId: bigint | string | number, userId: string | number): Promise<Utils.TypeChatParticipant>;
    /**
     * Get the number of members in a chat.
     * @param {number|string|bigint} chatId - Chat or channels id to getting the number of members.
     * ```ts
     * bot.command("getChatMembersCount",async (ctx) => {
     *     let results = await ctx.telegram.getChatMembersCount(ctx.chat.id)
     *     console.log(results)
     * })
     * ```
     */
    getChatMembersCount(chatId: bigint | number | string): Promise<number | undefined>;
    /**
     * Getting list from all participants in channel or chats.
     * @param {number|string|bigint} chatId - Chat or channels id to getting the list of members.
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("getChatMembers",async (ctx) => {
     *     let results = await ctx.telegram.getParticipants(ctx.chat.id) // getChatMembers and getParticipants is same methods.
     *     console.log(results)
     * })
     * ```
     */
    getParticipants(chatId: bigint | number | string, more?: Chats.GetParticipantMoreParams): Promise<Utils.ChatParticipants | undefined>;
    /**
     * Getting list from all participants in channel or chats.
     * @param {number|string|bigint} chatId - Chat or channels id to getting the list of members.
     * @param {Object} more - more parameters to use.
     * ```ts
     * bot.command("getChatMembers",async (ctx) => {
     *     let results = await ctx.telegram.getParticipants(ctx.chat.id) // getChatMembers and getParticipants is same methods.
     *     console.log(results)
     * })
     * ```
     */
    getChatMembers(chatId: bigint | number | string, more?: Chats.GetParticipantMoreParams): Promise<Utils.ChatParticipants | undefined>;
    answerInlineQuery(queryId: bigint, results: Array<Api.TypeInputBotInlineResult>, more?: Bots.AnswerInlineQueryMoreParams): Promise<boolean>;
    restrictChatMember(chatId: bigint | number | string, userId: bigint | number | string, more?: Chats.editBannedMoreParams): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    banChatMember(chatId: bigint | number | string, userId: bigint | number | string): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    kickChatMember(chatId: bigint | number | string, userId: bigint | number | string): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    unbanChatMember(chatId: bigint | number | string, userId: bigint | number | string): Promise<import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    /**
     * Downloading file, you can pass the media as JSON of message.media or you can pass with file id. If success it will returning a Buffer of that file.
     * ```ts
     * bot.on("message",async (ctx)=>{
     *  if(ctx.media){
     *    console.log(await ctx.telegram.download(ctx.media))
     *    // also you can do like :
     *    // console.log(await ctx.media.download())
     *   }
     * })
     * ```
     */
    download(media: string | Utils.Medias.TypeMessageMediaDownload, params?: Interface.DownloadFileParams): Promise<string | Buffer | undefined>;
    /**
     * Sending invoice (payment).
     * @param chatId {String|Number|BigInt} - target chat.
     * @param invoice {Object} - Invoice will be sending.
     * @param more {Object} - More parameter will be using to sending invoice.
     * ```ts
     * bot.command("invoice",(ctx)=>{
     *   return ctx.telegram.sendInvoice(ctx.chat.id,{
     *      test : true,
     *      currency : "usd",
     *      payload : "some payload here.",
     *      provider : "",
     *      title : "testing",
     *      description : "just testing lol. xD",
     *      prices : [{
     *          amount : 1000n,
     *          label : "1"
     *      }]
     *   })
     * })
     * ```
     */
    sendInvoice(chatId: number | string | bigint, invoice: Media.sendInvoiceParams, more?: Media.defaultSendMediaMoreParams): Promise<import("../Update").UpdateShortSentMessage | import("../Update").UpdateNewMessage | import("../Update").UpdateNewChannelMessage | undefined>;
    answerPrecheckoutQuery(id: bigint, ok: boolean, error?: string): Promise<boolean>;
    answerShippingQuery(id: bigint, options?: Array<Bots.ShippingOptions>, error?: string): Promise<boolean>;
}
