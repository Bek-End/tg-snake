"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetEntity = exports.ResultGetEntity = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const MigrateTo_1 = require("../../Utils/MigrateTo");
const BannedRight_1 = require("../../Utils/BannedRight");
const Medias_1 = require("../../Utils/Medias");
const RestrictionReason_1 = require("../../Utils/RestrictionReason");
const AdminRights_1 = require("../../Utils/AdminRights");
const telegram_1 = require("telegram");
const big_integer_1 = require("big-integer");
const ToBigInt_1 = require("../../Utils/ToBigInt");
const CleanObject_1 = require("../../Utils/CleanObject");
const Error_1 = __importDefault(require("../../Context/Error"));
class ResultGetEntity {
    constructor() { }
    async init(resultsGetEntity, snakeClient) {
        if (!resultsGetEntity)
            return this;
        if (resultsGetEntity instanceof telegram_1.Api.User) {
            resultsGetEntity;
            this.type = 'user';
            this.self = resultsGetEntity.self;
            this.contact = resultsGetEntity.contact;
            this.mutualContact = resultsGetEntity.mutualContact;
            this.deleted = resultsGetEntity.deleted;
            this.bot = resultsGetEntity.bot;
            this.botChatHistory = resultsGetEntity.botChatHistory;
            this.botNochats = resultsGetEntity.botNochats;
            this.verified = resultsGetEntity.verified;
            this.restricted = resultsGetEntity.restricted;
            this.min = resultsGetEntity.min;
            this.botInlineGeo = resultsGetEntity.botInlineGeo;
            this.support = resultsGetEntity.support;
            this.scam = resultsGetEntity.scam;
            this.applyMinPhoto = resultsGetEntity.applyMinPhoto;
            this.fake = resultsGetEntity.fake;
            if ((0, big_integer_1.isInstance)(resultsGetEntity.id)) {
                //@ts-ignore
                this.id = BigInt((0, ToBigInt_1.toString)(resultsGetEntity.id));
            }
            else {
                //@ts-ignore
                this.id = BigInt(resultsGetEntity.id);
            }
            this.accessHash = BigInt((0, ToBigInt_1.toString)(resultsGetEntity.accessHash));
            this.firstName = resultsGetEntity.firstName;
            this.lastName = resultsGetEntity.lastName;
            this.username = resultsGetEntity.username;
            this.phone = resultsGetEntity.phone;
            this.botInfoVersion = resultsGetEntity.botInfoVersion;
            this.botInlinePlaceholder = resultsGetEntity.botInlinePlaceholder;
            this.langCode = resultsGetEntity.langCode;
            if (resultsGetEntity.status) {
                switch (resultsGetEntity.status.className) {
                    case 'UserStatusOnline':
                        this.status = 'online';
                        break;
                    case 'UserStatusOffline':
                        this.status = 'offline';
                        break;
                    case 'UserStatusRecently':
                        this.status = 'recently';
                        break;
                    case 'UserStatusLastWeek':
                        this.status = 'withinWeek';
                        break;
                    case 'UserStatusLastMonth':
                        this.status = 'withinMonth';
                        break;
                    default:
                        this.status = 'longTimeAgo';
                }
            }
            if (resultsGetEntity.restrictionReason) {
                let temp = [];
                for (let i = 0; i < resultsGetEntity.restrictionReason.length; i++) {
                    temp.push(new RestrictionReason_1.RestrictionReason(resultsGetEntity.restrictionReason[i]));
                }
                this.restrictionReason = temp;
            }
            if (resultsGetEntity.photo instanceof telegram_1.Api.UserProfilePhoto) {
                resultsGetEntity.photo;
                this.photo = new Medias_1.MediaChatPhoto();
                await this.photo.encode(resultsGetEntity.photo, this.id, this.accessHash, snakeClient);
                this.dcId = resultsGetEntity.photo.dcId;
            }
            return this;
        }
        if (resultsGetEntity instanceof telegram_1.Api.Chat) {
            resultsGetEntity;
            this.type = 'chat';
            this.creator = resultsGetEntity.creator;
            this.left = resultsGetEntity.left;
            this.deactivated = resultsGetEntity.deactivated;
            this.callActive = resultsGetEntity.callActive;
            this.callNotEmpty = resultsGetEntity.callNotEmpty;
            this.noforward = resultsGetEntity.noforwards;
            if ((0, big_integer_1.isInstance)(resultsGetEntity.id)) {
                //@ts-ignore
                this.id = BigInt(`-${(0, ToBigInt_1.toString)(resultsGetEntity.id)}`);
            }
            else {
                //@ts-ignore
                this.id = BigInt(`-${resultsGetEntity.id}`);
            }
            this.title = resultsGetEntity.title;
            this.participantsCount = resultsGetEntity.participantsCount;
            this.version = resultsGetEntity.version;
            if (resultsGetEntity.migratedTo instanceof telegram_1.Api.InputChannel) {
                this.migratedTo = new MigrateTo_1.MigrateTo(resultsGetEntity.migratedTo);
            }
            if (resultsGetEntity.adminRights instanceof telegram_1.Api.ChatAdminRights) {
                this.adminRights = new AdminRights_1.AdminRights(resultsGetEntity.adminRights);
            }
            if (resultsGetEntity.defaultBannedRights instanceof telegram_1.Api.ChatBannedRights) {
                this.defaultBannedRights = new BannedRight_1.BannedRights(resultsGetEntity.defaultBannedRights);
            }
            if (resultsGetEntity.photo instanceof telegram_1.Api.ChatPhoto) {
                resultsGetEntity.photo;
                this.photo = new Medias_1.MediaChatPhoto();
                await this.photo.encode(resultsGetEntity.photo, this.id, this.accessHash, snakeClient);
                this.dcId = resultsGetEntity.photo.dcId;
            }
            return this;
        }
        if (resultsGetEntity instanceof telegram_1.Api.Channel) {
            resultsGetEntity;
            this.type = resultsGetEntity.megagroup ? 'supergroup' : 'channel';
            this.creator = resultsGetEntity.creator;
            this.left = resultsGetEntity.left;
            this.broadcast = resultsGetEntity.broadcast;
            this.verified = resultsGetEntity.verified;
            this.megagroup = resultsGetEntity.megagroup;
            this.restricted = resultsGetEntity.restricted;
            this.signatures = resultsGetEntity.signatures;
            this.min = resultsGetEntity.min;
            this.scam = resultsGetEntity.scam;
            this.hasLink = resultsGetEntity.hasLink;
            this.hasGeo = resultsGetEntity.hasGeo;
            this.slowmodeEnabled = resultsGetEntity.slowmodeEnabled;
            this.callActive = resultsGetEntity.callActive;
            this.callNotEmpty = resultsGetEntity.callNotEmpty;
            this.fake = resultsGetEntity.fake;
            this.gigagroup = resultsGetEntity.gigagroup;
            this.noforward = resultsGetEntity.noforwards;
            if ((0, big_integer_1.isInstance)(resultsGetEntity.id)) {
                //@ts-ignore
                this.id = BigInt(`-100${(0, ToBigInt_1.toString)(resultsGetEntity.id)}`);
            }
            else {
                //@ts-ignore
                this.id = BigInt(`-100${resultsGetEntity.id}`);
            }
            this.accessHash = BigInt((0, ToBigInt_1.toString)(resultsGetEntity.accessHash));
            this.title = resultsGetEntity.title;
            this.username = resultsGetEntity.username;
            if (resultsGetEntity.adminRights instanceof telegram_1.Api.ChatAdminRights) {
                this.adminRights = new AdminRights_1.AdminRights(resultsGetEntity.adminRights);
            }
            if (resultsGetEntity.bannedRights instanceof telegram_1.Api.ChatBannedRights) {
                this.bannedRights = new BannedRight_1.BannedRights(resultsGetEntity.bannedRights);
            }
            if (resultsGetEntity.defaultBannedRights instanceof telegram_1.Api.ChatBannedRights) {
                this.defaultBannedRights = new BannedRight_1.BannedRights(resultsGetEntity.defaultBannedRights);
            }
            this.participantsCount = resultsGetEntity.participantsCount;
            if (resultsGetEntity.restrictionReason) {
                let temp = [];
                for (let i = 0; i < resultsGetEntity.restrictionReason.length; i++) {
                    temp.push(new RestrictionReason_1.RestrictionReason(resultsGetEntity.restrictionReason[i]));
                }
                this.restrictionReason = temp;
            }
            if (resultsGetEntity.photo instanceof telegram_1.Api.ChatPhoto) {
                resultsGetEntity.photo;
                this.photo = new Medias_1.MediaChatPhoto();
                await this.photo.encode(resultsGetEntity.photo, this.id, this.accessHash, snakeClient);
                this.dcId = resultsGetEntity.photo.dcId;
            }
            return this;
        }
        return this;
    }
    /** @hidden */
    toJSON() {
        let obj = (0, CleanObject_1.betterConsoleLog)(this);
        for (let [key, value] of Object.entries(obj)) {
            if (typeof value == 'bigint')
                obj[key] = String(value);
        }
        return obj;
    }
}
exports.ResultGetEntity = ResultGetEntity;
async function GetEntity(snakeClient, chatId, useCache = true) {
    try {
        snakeClient.log.debug('Running telegram.getEntity');
        if (useCache) {
            if (typeof chatId == 'number') {
                if (snakeClient.entityCache.get(BigInt((0, ToBigInt_1.toString)(chatId)))) {
                    snakeClient.log.debug('Entity already in cache, so we use it, not fetching fresh data from telegram.');
                    //@ts-ignore
                    return snakeClient.entityCache.get(BigInt((0, ToBigInt_1.toString)(chatId)));
                }
            }
            if (typeof chatId == 'bigint') {
                if (snakeClient.entityCache.get(chatId)) {
                    snakeClient.log.debug('Entity already in cache, so we use it, not fetching fresh data from telegram.');
                    //@ts-ignore
                    return snakeClient.entityCache.get(chatId);
                }
            }
            if (typeof chatId == 'string') {
                if (String(chatId).startsWith('@')) {
                    if (snakeClient.entityCache.get(String(chatId).replace('@', ''))) {
                        snakeClient.log.debug('Entity already in cache, so we use it, not fetching fresh data from telegram.');
                        //@ts-ignore
                        return snakeClient.entityCache.get(String(chatId).replace('@', ''));
                    }
                }
            }
        }
        snakeClient.log.debug('Entity not available in cache, so we fetching fresh data from telegram.');
        let e = await snakeClient.client.getEntity((0, ToBigInt_1.convertId)(chatId));
        snakeClient.log.debug('Creating ResultGetEntity');
        let r = new ResultGetEntity();
        await r.init(e, snakeClient);
        snakeClient.log.debug('Caching ResultGetEntity');
        snakeClient.entityCache.set(r.id, r);
        if (r.username)
            snakeClient.entityCache.set(r.username, r);
        return r;
    }
    catch (error) {
        snakeClient.log.error('Failed running telegram.getEntity');
        throw new Error_1.default(error.message, 'telegram.getEntity', `${chatId},${useCache}`);
    }
}
exports.GetEntity = GetEntity;
