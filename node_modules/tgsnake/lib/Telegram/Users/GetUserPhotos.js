"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUserPhotos = void 0;
const telegram_1 = require("telegram");
const big_integer_1 = __importDefault(require("big-integer"));
const ToBigInt_1 = require("../../Utils/ToBigInt");
const Error_1 = __importDefault(require("../../Context/Error"));
/**
 * Getting all user profile photos.
 * @param snakeClient - Client
 * @param {number|string|bigint} userId - id of user.
 * @param {Object} more - more object for getUserPhotos
 * ```ts
 * bot.command("getUserPhotos",async (ctx)=>{
 *     let results = await ctx.telegram.getUserPhotos(ctx.from.id)
 *     console.log(results)
 * })
 * ```
 */
async function GetUserPhotos(snakeClient, userId, more) {
    try {
        snakeClient.log.debug('Running telegram.getUserPhotos');
        let [id, type, peer] = await (0, ToBigInt_1.toBigInt)(userId, snakeClient);
        let results = await snakeClient.client.invoke(new telegram_1.Api.photos.GetUserPhotos({
            userId: peer,
            offset: more ? more.offset : undefined,
            maxId: more ? (0, big_integer_1.default)(String(more.maxId)) : undefined,
            limit: more ? more.limit : undefined,
        }));
        return results;
    }
    catch (error) {
        snakeClient.log.error('Failed to running telegram.getUserPhotos');
        throw new Error_1.default(error.message, 'telegram.getUserPhotos', `${userId}${more ? ',' + JSON.stringify(more) : ''}`);
    }
}
exports.GetUserPhotos = GetUserPhotos;
