"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateBotCallbackQuery = void 0;
const telegram_1 = require("telegram");
const From_1 = require("../Utils/From");
const Update_1 = require("./Update");
const MessageContext_1 = require("../Context/MessageContext");
const ToBigInt_1 = require("../Utils/ToBigInt");
class UpdateBotCallbackQuery extends Update_1.Update {
    constructor() {
        super();
        this['_'] = 'updateBotCallbackQuery';
    }
    async init(update, SnakeClient) {
        var _a;
        SnakeClient.log.debug(`Creating ${this['_']}`);
        this.telegram = SnakeClient.telegram;
        this.data = (_a = update.data) === null || _a === void 0 ? void 0 : _a.toString('utf8');
        this.id = BigInt((0, ToBigInt_1.toString)(update.queryId));
        this.gameShortName = update.gameShortName;
        this.chatInstance = BigInt((0, ToBigInt_1.toString)(update.chatInstance));
        this.message = new MessageContext_1.MessageContext();
        if (update.peer instanceof telegram_1.Api.PeerChat) {
            update.peer;
            let msg = await SnakeClient.telegram.getMessages(BigInt(`-${(0, ToBigInt_1.toString)(update.peer.chatId)}`), [update.msgId]);
            this.message = msg.messages[0];
        }
        if (update.peer instanceof telegram_1.Api.PeerChannel) {
            update.peer;
            let msg = await SnakeClient.telegram.getMessages(BigInt(`-100${(0, ToBigInt_1.toString)(update.peer.channelId)}`), [update.msgId]);
            this.message = msg.messages[0];
        }
        if (update.peer instanceof telegram_1.Api.PeerUser) {
            update.peer;
            let msg = await SnakeClient.telegram.getMessages(BigInt((0, ToBigInt_1.toString)(update.peer.userId)), [update.msgId]);
            this.message = msg.messages[0];
        }
        this.from = new From_1.From();
        await this.from.init(BigInt((0, ToBigInt_1.toString)(update.userId)), SnakeClient);
        return this;
    }
}
exports.UpdateBotCallbackQuery = UpdateBotCallbackQuery;
