"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateBotInlineQuery = void 0;
const telegram_1 = require("telegram");
const From_1 = require("../Utils/From");
const Update_1 = require("./Update");
const Medias = __importStar(require("../Utils/Medias"));
const ToBigInt_1 = require("../Utils/ToBigInt");
class UpdateBotInlineQuery extends Update_1.Update {
    constructor() {
        super();
        this['_'] = 'updateBotInlineQuery';
    }
    async init(update, SnakeClient) {
        SnakeClient.log.debug(`Creating ${this['_']}`);
        this.telegram = SnakeClient.telegram;
        this.id = BigInt((0, ToBigInt_1.toString)(update.queryId));
        this.query = update.query;
        this.offset = update.offset;
        if (update.peerType instanceof telegram_1.Api.InlineQueryPeerTypeSameBotPM) {
            this.chatType = 'sender';
        }
        if (update.peerType instanceof telegram_1.Api.InlineQueryPeerTypePM) {
            this.chatType = 'private';
        }
        if (update.peerType instanceof telegram_1.Api.InlineQueryPeerTypeChat) {
            this.chatType = 'group';
        }
        if (update.peerType instanceof telegram_1.Api.InlineQueryPeerTypeMegagroup) {
            this.chatType = 'superGroup';
        }
        if (update.peerType instanceof telegram_1.Api.InlineQueryPeerTypeBroadcast) {
            this.chatType = 'channel';
        }
        if (update.geo) {
            this.location = new Medias.MediaLocation();
            await this.location.encode(update.geo, SnakeClient);
        }
        this.from = new From_1.From();
        await this.from.init(BigInt((0, ToBigInt_1.toString)(update.userId)), SnakeClient);
        return this;
    }
}
exports.UpdateBotInlineQuery = UpdateBotInlineQuery;
