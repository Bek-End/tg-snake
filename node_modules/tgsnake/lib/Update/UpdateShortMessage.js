"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateShortMessage = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const Update_1 = require("./Update");
const telegram_1 = require("telegram");
const parser_1 = __importDefault(require("@tgsnake/parser"));
const ForwardMessage_1 = require("../Utils/ForwardMessage");
const From_1 = require("../Utils/From");
const Chat_1 = require("../Utils/Chat");
const MessageContext_1 = require("../Context/MessageContext");
const ToBigInt_1 = require("../Utils/ToBigInt");
const parser = new parser_1.default(telegram_1.Api);
class UpdateShortMessage extends Update_1.Update {
    constructor() {
        super();
        this['_'] = 'updateShortMessage';
    }
    async init(update, SnakeClient) {
        SnakeClient.log.debug(`Creating ${this['_']}`);
        this.message = new MessageContext_1.MessageContext();
        this.telegram = SnakeClient.telegram;
        this.message.out = update.out;
        this.message.mentioned = update.mentioned;
        this.message.mediaUnread = update.mediaUnread;
        this.message.silent = update.silent;
        this.message.id = update.id;
        this.message.text = update.message;
        this.message.date = update.date;
        this.message.ttlPeriod = update.ttlPeriod;
        this.message.viaBotId = BigInt((0, ToBigInt_1.toString)(update.viaBotId));
        this.message.SnakeClient = SnakeClient;
        if (update.userId) {
            let chat = new Chat_1.Chat();
            let from = new From_1.From();
            await chat.init(BigInt((0, ToBigInt_1.toString)(update.userId)), SnakeClient);
            if (!update.out) {
                await from.init(BigInt((0, ToBigInt_1.toString)(update.userId)), SnakeClient);
            }
            else {
                await from.init(SnakeClient.aboutMe.id, SnakeClient);
            }
            this.message.chat = chat;
            this.message.from = from;
        }
        if (update.replyTo) {
            this.SnakeClient.log.debug(`Creating replyToMessage`);
            let replyTo = await this.SnakeClient.telegram.getMessages(this.message.chat.id, [update.replyTo.replyToMsgId], false);
            this.message.replyToMessage = replyTo.messages[0];
        }
        if (update.fwdFrom) {
            let fwd = new ForwardMessage_1.ForwardMessage();
            await fwd.init(update.fwdFrom, SnakeClient);
            this.message.fwdFrom = fwd;
        }
        if (update.entities) {
            this.message.entities = parser.fromRaw(update.entities);
        }
        return this;
    }
}
exports.UpdateShortMessage = UpdateShortMessage;
