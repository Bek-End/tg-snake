"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chat = void 0;
const telegram_1 = require("telegram");
const ToBigInt_1 = require("./ToBigInt");
const big_integer_1 = require("big-integer");
const CleanObject_1 = require("./CleanObject");
class Chat {
    constructor() { }
    async init(peer, snakeClient) {
        if (typeof peer !== 'number' && typeof peer !== 'bigint') {
            if (peer instanceof telegram_1.Api.PeerUser) {
                peer;
                if ((0, big_integer_1.isInstance)(peer.userId)) {
                    //@ts-ignore
                    this.id = BigInt((0, ToBigInt_1.toString)(peer.userId));
                }
                else {
                    //@ts-ignore
                    this.id = BigInt(peer.userId);
                }
            }
            if (peer instanceof telegram_1.Api.PeerChat) {
                peer;
                if ((0, big_integer_1.isInstance)(peer.chatId)) {
                    //@ts-ignore
                    this.id = BigInt(`-${(0, ToBigInt_1.toString)(peer.chatId)}`);
                }
                else {
                    //@ts-ignore
                    this.id = BigInt(`-${peer.chatId}`);
                }
            }
            if (peer instanceof telegram_1.Api.PeerChannel) {
                peer;
                if ((0, big_integer_1.isInstance)(peer.channelId)) {
                    //@ts-ignore
                    this.id = BigInt(`-100${(0, ToBigInt_1.toString)(peer.channelId)}`);
                }
                else {
                    //@ts-ignore
                    this.id = BigInt(`-100${peer.channelId}`);
                }
            }
        }
        else {
            this.id = typeof peer == 'number' ? BigInt(peer) : peer;
        }
        if (this.id) {
            snakeClient.log.debug(`Creating Chat ${this.id}`);
            let tg = snakeClient.telegram;
            try {
                let entity = await tg.getEntity(this.id, true);
                this.id = entity.id;
                this.noforward = entity.noforward;
                this.username = entity.username;
                this.firstName = entity.firstName;
                this.lastName = entity.lastName;
                this.title = entity.title;
                this.photo = entity.photo;
                this.defaultBannedRights = entity.defaultBannedRights;
                this.participantsCount = entity.participantsCount;
                this.dcId = entity.dcId;
                this.fake = entity.fake !== undefined ? entity.fake : false;
                this.scam = entity.scam !== undefined ? entity.scam : false;
                this.private = Boolean(entity.type === 'user');
                this.type = entity.type;
                this.accessHash = entity.accessHash;
            }
            catch (error) {
                return this;
            }
        }
        await (0, CleanObject_1.Cleaning)(this);
        return this;
    }
    /** @hidden */
    toJSON() {
        let obj = (0, CleanObject_1.betterConsoleLog)(this);
        for (let [key, value] of Object.entries(obj)) {
            if (typeof value == 'bigint')
                obj[key] = String(value);
        }
        return obj;
    }
}
exports.Chat = Chat;
