"use strict";
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatParticipants = exports.ChatParticipantsForbidden = exports.ChatParticipantAdmin = exports.ChatParticipantCreator = exports.ChatParticipant = exports.ChannelParticipant = void 0;
const telegram_1 = require("telegram");
const From_1 = require("./From");
const Chat_1 = require("./Chat");
const AdminRights_1 = require("./AdminRights");
const BannedRight_1 = require("./BannedRight");
const GetEntity_1 = require("../Telegram/Users/GetEntity");
const ToBigInt_1 = require("./ToBigInt");
class ChannelParticipant {
    constructor() {
        this.date = Math.floor(Date.now() / 1000);
    }
    async init(participant, SnakeClient) {
        SnakeClient.log.debug(`Creating ChannelParticipant`);
        if (participant instanceof telegram_1.Api.ChannelParticipantCreator) {
            participant;
            this.status = 'creator';
            this.adminRights = new AdminRights_1.AdminRights(participant.adminRights);
            this.user = new From_1.From();
            await this.user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient);
            return this;
        }
        if (participant instanceof telegram_1.Api.ChannelParticipantAdmin) {
            participant;
            this.status = 'admin';
            this.adminRights = new AdminRights_1.AdminRights(participant.adminRights);
            this.canEdit = participant.canEdit;
            this.self = participant.self;
            this.rank = participant.rank;
            this.user = new From_1.From();
            await this.user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient);
            if (participant.inviterId) {
                this.inviter = new From_1.From();
                await this.inviter.init(BigInt((0, ToBigInt_1.toString)(participant.inviterId)), SnakeClient);
            }
            if (participant.promotedBy) {
                this.promotedBy = new From_1.From();
                await this.promotedBy.init(BigInt((0, ToBigInt_1.toString)(participant.promotedBy)), SnakeClient);
            }
            return this;
        }
        if (participant instanceof telegram_1.Api.ChannelParticipantBanned) {
            participant;
            this.status = 'banned';
            this.bannedRights = new BannedRight_1.BannedRights(participant.bannedRights);
            if (!participant.left) {
                this.status = 'restricted';
            }
            this.user = new From_1.From();
            //@ts-ignore
            await this.user.init(BigInt((0, ToBigInt_1.toString)(participant.peer.userId)), SnakeClient);
            if (participant.kickedBy) {
                this.kickedBy = new From_1.From();
                await this.kickedBy.init(BigInt((0, ToBigInt_1.toString)(participant.kickedBy)), SnakeClient);
            }
            return this;
        }
        if (participant instanceof telegram_1.Api.ChannelParticipantLeft) {
            participant;
            this.status = 'left';
            this.user = new From_1.From();
            //@ts-ignore
            await this.user.init(BigInt((0, ToBigInt_1.toString)(participant.peer.userId)), SnakeClient);
            return this;
        }
        if (participant instanceof telegram_1.Api.ChannelParticipantSelf) {
            participant;
            this.status = 'self';
            this.user = new From_1.From();
            await this.user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient);
            if (participant.inviterId) {
                this.inviter = new From_1.From();
                await this.inviter.init(BigInt((0, ToBigInt_1.toString)(participant.inviterId)), SnakeClient);
            }
            return this;
        }
        if (participant instanceof telegram_1.Api.ChannelParticipant) {
            participant;
            this.status = 'member';
            this.user = new From_1.From();
            await this.user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient);
            return this;
        }
    }
}
exports.ChannelParticipant = ChannelParticipant;
class ChatParticipant {
    constructor() {
        this.status = 'member';
    }
    async init(participant, SnakeClient) {
        SnakeClient.log.debug(`Creating ChatParticipant`);
        this.date = participant.date;
        if (participant.userId) {
            let user = new From_1.From();
            await user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient);
            this.user = user;
        }
        if (participant.inviterId) {
            let inviter = new From_1.From();
            await inviter.init(BigInt((0, ToBigInt_1.toString)(participant.inviterId)), SnakeClient);
            this.inviter = inviter;
        }
        return this;
    }
}
exports.ChatParticipant = ChatParticipant;
class ChatParticipantCreator {
    constructor() {
        this.status = 'creator';
    }
    async init(participant, SnakeClient) {
        SnakeClient.log.debug(`Creating ChatParticipantCreator`);
        if (participant.userId) {
            let user = new From_1.From();
            await user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient);
            this.user = user;
        }
        return this;
    }
}
exports.ChatParticipantCreator = ChatParticipantCreator;
class ChatParticipantAdmin {
    constructor() {
        this.status = 'admin';
    }
    async init(participant, SnakeClient) {
        SnakeClient.log.debug(`Creating ChatParticipantAdmin`);
        this.date = participant.date;
        if (participant.userId) {
            let user = new From_1.From();
            await user.init(BigInt((0, ToBigInt_1.toString)(participant.userId)), SnakeClient);
            this.user = user;
        }
        if (participant.inviterId) {
            let inviter = new From_1.From();
            await inviter.init(BigInt((0, ToBigInt_1.toString)(participant.inviterId)), SnakeClient);
            this.inviter = inviter;
        }
        return this;
    }
}
exports.ChatParticipantAdmin = ChatParticipantAdmin;
class ChatParticipantsForbidden {
    constructor() {
        this.status = 'forbidden';
    }
    async init(participant, SnakeClient) {
        SnakeClient.log.debug(`Creating ChatParticipantsForbidden`);
        if (participant.chatId) {
            let chat = new Chat_1.Chat();
            await chat.init(BigInt((0, ToBigInt_1.toString)(participant.chatId)), SnakeClient);
            this.chat = chat;
        }
        if (participant.selfParticipant) {
            if (participant.selfParticipant instanceof telegram_1.Api.ChatParticipant) {
                let selfParticipant = new ChatParticipant();
                await selfParticipant.init(participant.selfParticipant, SnakeClient);
                this.selfParticipant = selfParticipant;
            }
            if (participant.selfParticipant instanceof telegram_1.Api.ChatParticipantCreator) {
                let selfParticipant = new ChatParticipantCreator();
                await selfParticipant.init(participant.selfParticipant, SnakeClient);
                this.selfParticipant = selfParticipant;
            }
            if (participant.selfParticipant instanceof telegram_1.Api.ChatParticipantAdmin) {
                let selfParticipant = new ChatParticipantAdmin();
                await selfParticipant.init(participant.selfParticipant, SnakeClient);
                this.selfParticipant = selfParticipant;
            }
        }
        return this;
    }
}
exports.ChatParticipantsForbidden = ChatParticipantsForbidden;
class ChatParticipants {
    constructor() { }
    async init(participant, SnakeClient) {
        SnakeClient.log.debug(`Creating ChatParticipants`);
        if (participant instanceof telegram_1.Api.ChatParticipants) {
            return await this._ChatParticipants(participant, SnakeClient);
        }
        if (participant instanceof telegram_1.Api.channels.ChannelParticipants) {
            return await this._ChannelParticipants(participant, SnakeClient);
        }
        if (participant instanceof telegram_1.Api.channels.ChannelParticipant) {
            return await this._ChannelParticipant(participant, SnakeClient);
        }
    }
    /** @hidden */
    async _ChatParticipants(participant, SnakeClient) {
        this.version = participant.version;
        if (participant.chatId) {
            let chat = new Chat_1.Chat();
            await chat.init(BigInt((0, ToBigInt_1.toString)(participant.chatId)), SnakeClient);
            this.chat = chat;
        }
        if (participant.participants) {
            let participants = participant.participants;
            let temp = [];
            this.count = participants.length;
            let i = 0;
            while (true) {
                let item = participants[i];
                if (item instanceof telegram_1.Api.ChatParticipant) {
                    let selfParticipant = new ChatParticipant();
                    await selfParticipant.init(item, SnakeClient);
                    temp.push(selfParticipant);
                }
                if (item instanceof telegram_1.Api.ChatParticipantCreator) {
                    let selfParticipant = new ChatParticipantCreator();
                    await selfParticipant.init(item, SnakeClient);
                    temp.push(selfParticipant);
                }
                if (item instanceof telegram_1.Api.ChatParticipantAdmin) {
                    let selfParticipant = new ChatParticipantAdmin();
                    await selfParticipant.init(item, SnakeClient);
                    temp.push(selfParticipant);
                }
                if (temp.length >= participants.length) {
                    this.participants = temp;
                    return this;
                }
                i++;
            }
        }
        return this;
    }
    /** @hidden */
    async _ChannelParticipants(participant, SnakeClient) {
        //@ts-ignore
        this.count = participant.count || participant.participants.length;
        let participants = participant.participants;
        let temp = [];
        //@ts-ignore
        participant.users.map(async (item) => {
            let entity = new GetEntity_1.ResultGetEntity();
            await entity.init(item, SnakeClient);
            SnakeClient.entityCache.set(entity.id, entity);
            if (entity.username)
                SnakeClient.entityCache.set(entity.username, entity);
        });
        //@ts-ignore
        participant.chats.map(async (item) => {
            if (item instanceof telegram_1.Api.Chat) {
                item;
            }
            else {
                item;
            }
            let entity = new GetEntity_1.ResultGetEntity();
            await entity.init(item, SnakeClient);
            SnakeClient.entityCache.set(entity.id, entity);
            if (entity.username)
                SnakeClient.entityCache.set(entity.username, entity);
        });
        let i = 0;
        while (true) {
            let item = participants[i];
            let channelPart = new ChannelParticipant();
            await channelPart.init(item, SnakeClient);
            temp.push(channelPart);
            if (temp.length >= participants.length) {
                this.participants = temp;
                return this;
            }
            i++;
        }
    }
    /** @hidden */
    async _ChannelParticipant(participant, SnakeClient) {
        var _a;
        //@ts-ignore
        this.count = participant.count || ((_a = participant.participants) === null || _a === void 0 ? void 0 : _a.length) || 1;
        let participants = participant.participant;
        let temp = [];
        //@ts-ignore
        participant.users.map(async (item) => {
            let entity = new GetEntity_1.ResultGetEntity();
            await entity.init(item, SnakeClient);
            SnakeClient.entityCache.set(entity.id, entity);
            if (entity.username)
                SnakeClient.entityCache.set(entity.username, entity);
        });
        //@ts-ignore
        participant.chats.map(async (item) => {
            if (item instanceof telegram_1.Api.Chat) {
                item;
            }
            else {
                item;
            }
            let entity = new GetEntity_1.ResultGetEntity();
            await entity.init(item, SnakeClient);
            SnakeClient.entityCache.set(entity.id, entity);
            if (entity.username)
                SnakeClient.entityCache.set(entity.username, entity);
        });
        let channelPart = new ChannelParticipant();
        await channelPart.init(participants, SnakeClient);
        temp.push(channelPart);
        this.participants = temp;
        return this;
    }
}
exports.ChatParticipants = ChatParticipants;
