"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaPoll = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const telegram_1 = require("telegram");
const Media_1 = require("./Media");
const parser_1 = __importDefault(require("@tgsnake/parser"));
const CleanObject_1 = require("../CleanObject");
const parser = new parser_1.default(telegram_1.Api);
class MediaPoll extends Media_1.Media {
    constructor() {
        super();
        this['_'] = 'poll';
    }
    async encode(poll, snakeClient) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        snakeClient.log.debug('Creating MediaPoll');
        this.snakeClient = snakeClient;
        this.closed = (_a = poll.poll.closed) !== null && _a !== void 0 ? _a : false;
        this.publicVoters = (_b = poll.poll.publicVoters) !== null && _b !== void 0 ? _b : false;
        this.multipleChoice = (_c = poll.poll.multipleChoice) !== null && _c !== void 0 ? _c : false;
        this.quiz = (_d = poll.poll.quiz) !== null && _d !== void 0 ? _d : false;
        this.question = poll.poll.question;
        this.id = BigInt(String(poll.poll.id));
        this.closeDate = (_e = poll.poll.closeDate) !== null && _e !== void 0 ? _e : 0;
        this.closePeriod = (_f = poll.poll.closePeriod) !== null && _f !== void 0 ? _f : 0;
        this.min = (_g = poll.results.min) !== null && _g !== void 0 ? _g : false;
        this.totalVoters = (_h = poll.results.totalVoters) !== null && _h !== void 0 ? _h : 0;
        this.solution = poll.results.solution;
        this.solutionEntities = await parser.fromRaw((_j = poll.results.solutionEntities) !== null && _j !== void 0 ? _j : []);
        this.recentVoters = poll.results.recentVoters;
        let asn = [];
        for (let index in poll.poll.answers) {
            //@ts-ignore
            let answer = poll.poll.answers[index];
            //@ts-ignore
            let results = poll.results.results[index];
            if (!answer && !results)
                continue;
            asn.push({
                text: answer.text,
                chosen: (_k = results.chosen) !== null && _k !== void 0 ? _k : false,
                correct: (_l = results.correct) !== null && _l !== void 0 ? _l : false,
                voters: (_m = results.voters) !== null && _m !== void 0 ? _m : 0,
                option: answer.option.toString('utf8'),
            });
        }
        this.answers = asn;
        await (0, CleanObject_1.Cleaning)(this);
        return this;
    }
}
exports.MediaPoll = MediaPoll;
