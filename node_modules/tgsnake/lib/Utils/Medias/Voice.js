"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaVoice = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const telegram_1 = require("telegram");
const Media_1 = require("./Media");
const tg_file_id_1 = require("tg-file-id");
const big_integer_1 = __importDefault(require("big-integer"));
const CleanObject_1 = require("../CleanObject");
const Error_1 = __importDefault(require("../../Context/Error"));
class MediaVoice extends Media_1.Media {
    constructor() {
        super();
        this['_'] = 'voice';
    }
    async encode(voice, snakeClient) {
        snakeClient.log.debug('Creating MediaVoice');
        this.snakeClient = snakeClient;
        this._id = BigInt(String(voice.id));
        this._accessHash = BigInt(String(voice.accessHash));
        this._fileReference = voice.fileReference.toString('hex');
        this.mimeType = voice.mimeType;
        this.size = BigInt(String(voice.size));
        this.dcId = voice.dcId;
        for (let attribute of voice.attributes) {
            if (attribute instanceof telegram_1.Api.DocumentAttributeAudio) {
                attribute;
                //@ts-ignore
                this.title = attribute.title;
                //@ts-ignore
                this.performer = attribute.performer;
                //@ts-ignore
                this.waveform = attribute.waveform;
            }
        }
        let file = new tg_file_id_1.FileId();
        file.version = 4;
        file.subVersion = 30;
        file.dcId = this.dcId;
        file.fileType = 'voice';
        file.typeId = 3;
        file.volumeId = BigInt(1);
        file.id = this._id;
        file.accessHash = this._accessHash;
        file.fileReference = this._fileReference;
        this.fileId = await file.toFileId();
        this.uniqueFileId = await file.toFileUniqId();
        await (0, CleanObject_1.Cleaning)(this);
        return this;
    }
    async download(fileId, params) {
        this.snakeClient.log.debug('Downloading Voice');
        const { client, log } = this.snakeClient;
        const file = fileId !== null && fileId !== void 0 ? fileId : this.fileId;
        const inRange = (x, min, max) => {
            return (x - min) * (x - max) <= 0;
        };
        if (!file) {
            this.snakeClient.log.error('Failed to download audio cause: FileId not found!');
            throw new Error_1.default('FileId not found!', 'Voice.download', String(file));
        }
        if (file !== this.fileId) {
            let dFile = this.decode(file);
            if (dFile.typeId !== 3) {
                this.snakeClient.log.error('Failed to download audio cause: Miss match file type!');
                throw new Error_1.default('Miss match file type!', 'Voice.download', String(file));
            }
            let dParams = Object.assign({
                dcId: dFile.dcId,
                progressCallback: (progress) => {
                    return log.debug(`Downloading voice [${Math.round(progress)}]`);
                },
            }, params !== null && params !== void 0 ? params : {});
            return client.downloadFile(new telegram_1.Api.InputDocumentFileLocation({
                id: (0, big_integer_1.default)(String(dFile.id)),
                accessHash: (0, big_integer_1.default)(String(dFile.access_hash)),
                fileReference: Buffer.from(dFile.fileReference, 'hex'),
                thumbSize: 'w',
            }), 
            // @ts-ignore
            dParams);
        }
        let dParams = Object.assign({
            dcId: this.dcId,
            fileSize: (0, big_integer_1.default)(this.size),
            progressCallback: (progress) => {
                return log.debug(`Downloading voice [${Math.round(progress)}]`);
            },
        }, params !== null && params !== void 0 ? params : {});
        return client.downloadFile(new telegram_1.Api.InputDocumentFileLocation({
            id: (0, big_integer_1.default)(String(this._id)),
            accessHash: (0, big_integer_1.default)(String(this._accessHash)),
            fileReference: Buffer.from(this._fileReference, 'hex'),
            thumbSize: 'w',
        }), 
        // @ts-ignore
        dParams);
    }
}
exports.MediaVoice = MediaVoice;
