"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageAction = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const telegram_1 = require("telegram");
const Payment_1 = require("./Payment");
const Medias = __importStar(require("./Medias"));
const ToBigInt_1 = require("./ToBigInt");
const From_1 = require("./From");
const Chat_1 = require("./Chat");
const CleanObject_1 = require("./CleanObject");
class MessageAction {
    constructor() { }
    async init(messageAction, snakeClient) {
        snakeClient.log.debug(`Creating messageAction`);
        if (messageAction instanceof telegram_1.Api.MessageActionChatCreate) {
            messageAction;
            this['_'] = 'chatCreate';
            this.title = messageAction.title;
            let c = [];
            for (let users of messageAction.users) {
                let from = new From_1.From();
                await from.init(BigInt((0, ToBigInt_1.toString)(users)), snakeClient);
                c.push(from);
            }
            this.users = c;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChatEditTitle) {
            messageAction;
            this.title = messageAction.title;
            this['_'] = 'editChatTitle';
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChatEditPhoto) {
            messageAction;
            this['_'] = 'editChatPhoto';
            let media = new Medias.MediaPhoto();
            await media.encode(messageAction.photo, snakeClient);
            this.photo = media;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChatAddUser) {
            this['_'] = 'newChatMember';
            messageAction;
            let c = [];
            for (let users of messageAction.users) {
                let from = new From_1.From();
                await from.init(BigInt((0, ToBigInt_1.toString)(users)), snakeClient);
                c.push(from);
            }
            this.users = c;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChatDeleteUser) {
            messageAction;
            this['_'] = 'leftChatMember';
            this.user = new From_1.From();
            await this.user.init(BigInt((0, ToBigInt_1.toString)(messageAction.userId)), snakeClient);
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChatJoinedByLink) {
            messageAction;
            this['_'] = 'newChatMember';
            this.invite = new From_1.From();
            await this.invite.init(BigInt((0, ToBigInt_1.toString)(messageAction.inviterId)), snakeClient);
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChannelCreate) {
            messageAction;
            this['_'] = 'channelCreate';
            this.title = messageAction.title;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChatMigrateTo) {
            messageAction;
            this['_'] = 'migrateTo';
            this.channel = new Chat_1.Chat();
            await this.channel.init(BigInt(`-100${(0, ToBigInt_1.toString)(messageAction.channelId)}`), snakeClient);
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChannelMigrateFrom) {
            messageAction;
            this['_'] = 'migrateFrom';
            this.title = messageAction.title;
            this.chat = new Chat_1.Chat();
            await this.chat.init(BigInt(`-${(0, ToBigInt_1.toString)(messageAction.chatId)}`), snakeClient);
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionGameScore) {
            messageAction;
            this['_'] = 'gameScore';
            this.gameId = BigInt((0, ToBigInt_1.toString)(messageAction.gameId));
            this.score = messageAction.score;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionPaymentSentMe) {
            messageAction;
            this['_'] = 'paymentSentMe';
            this.currency = messageAction.currency;
            this.totalAmount = BigInt((0, ToBigInt_1.toString)(messageAction.totalAmount));
            this.payload = messageAction.payload.toString('utf8');
            if (messageAction.info)
                this.info = new Payment_1.PaymentRequestedInfo(messageAction.info);
            if (messageAction.shippingOptionId)
                this.shippingOptionId = messageAction.shippingOptionId;
            if (messageAction.charge)
                this.charge = new Payment_1.PaymentCharge(messageAction.charge);
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionPaymentSent) {
            messageAction;
            this['_'] = 'paymentSent';
            this.currency = messageAction.currency;
            this.totalAmount = BigInt((0, ToBigInt_1.toString)(messageAction.totalAmount));
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionPhoneCall) {
            messageAction;
            this['_'] = 'phoneCall';
            this.video = messageAction.video;
            this.callId = BigInt((0, ToBigInt_1.toString)(messageAction.callId));
            if (messageAction.reason) {
                this.reason = messageAction.reason.className
                    .replace('PhoneCallDiscardReason', '')
                    .trim()
                    .toLowerCase();
            }
            this.duration = messageAction.duration;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionCustomAction) {
            messageAction;
            this['_'] = 'customAction';
            this.message = messageAction.message;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionBotAllowed) {
            messageAction;
            this['_'] = 'botAllowed';
            this.domain = messageAction.domain;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionSecureValuesSentMe) {
            messageAction;
            this['_'] = 'secureValuesSentMe';
            this.values = messageAction.values;
            this.credentials = messageAction.credentials;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionSecureValuesSent) {
            messageAction;
            this['_'] = 'secureValuesSent';
            this.types = messageAction.types;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChatDeletePhoto) {
            this['_'] = 'deleteChatPhoto';
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionPinMessage) {
            this['_'] = 'pinMessage';
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionHistoryClear) {
            this['_'] = 'historyClear';
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionScreenshotTaken) {
            this['_'] = 'screenshotTaken';
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionContactSignUp) {
            this['_'] = 'contactSingUp';
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionGroupCall) {
            messageAction;
            this['_'] = 'groupCall';
            this.call = messageAction.call;
            this.duration = messageAction.duration;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionGroupCallScheduled) {
            messageAction;
            this['_'] = 'groupCallScheduled';
            this.call = messageAction.call;
            this.scheduleDate = messageAction.scheduleDate;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionInviteToGroupCall) {
            messageAction;
            this['_'] = 'inviteToGroupCall';
            let c = [];
            for (let users of messageAction.users) {
                let from = new From_1.From();
                await from.init(BigInt((0, ToBigInt_1.toString)(users)), snakeClient);
                c.push(from);
            }
            this.users = c;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionSetChatTheme) {
            messageAction;
            this['_'] = 'setChatTheme';
            this.emoticon = messageAction.emoticon;
            return this;
        }
        if (messageAction instanceof telegram_1.Api.MessageActionChatJoinedByRequest) {
            messageAction;
            this['_'] = 'chatJoinedByRequest';
            return this;
        }
    }
    /** @hidden */
    toJSON() {
        let obj = (0, CleanObject_1.betterConsoleLog)(this);
        for (let [key, value] of Object.entries(obj)) {
            if (typeof value == 'bigint')
                obj[key] = String(value);
        }
        return obj;
    }
}
exports.MessageAction = MessageAction;
