"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertId = exports.toString = exports.toBigInt = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://guthub.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
const big_integer_1 = __importStar(require("big-integer"));
const telegram_1 = require("telegram");
async function toBigInt(Ids, SnakeClient) {
    let e = await SnakeClient.telegram.getEntity(Ids, true);
    let id = (0, big_integer_1.default)(String(e.id).replace('-100', '').replace('-', ''));
    let d = e.type == 'channel' || e.type == 'supergroup'
        ? new telegram_1.Api.PeerChannel({
            channelId: id,
        })
        : e.type == 'chat'
            ? new telegram_1.Api.PeerChat({
                chatId: id,
            })
            : new telegram_1.Api.PeerUser({
                userId: id,
            });
    return [id, e.type, d];
}
exports.toBigInt = toBigInt;
function toString(Ids) {
    if (Ids == null) {
        return 0;
    }
    if ((0, big_integer_1.isInstance)(Ids)) {
        //@ts-ignore
        return String(Ids);
    }
    //@ts-ignore
    return String(Ids);
}
exports.toString = toString;
function convertId(ids) {
    if (typeof ids == 'bigint') {
        return (0, big_integer_1.default)(ids);
    }
    if (typeof ids == 'number') {
        return (0, big_integer_1.default)(String(ids));
    }
    return String(ids);
}
exports.convertId = convertId;
