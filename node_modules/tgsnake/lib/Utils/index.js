"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Medias = exports.convertId = exports.toString = exports.toBigInt = exports.RestrictionReason = exports.convertReplyMarkup = exports.BuildReplyMarkup = exports.Reactions = exports.PaymentCharge = exports.PostAddress = exports.PaymentRequestedInfo = exports.MigrateTo = exports.MessageAction = exports.Message = exports.From = exports.ForwardMessage = exports.toJSON = exports.betterConsoleLog = exports.Cleaning = exports.ChatParticipants = exports.ChatParticipantsForbidden = exports.ChatParticipantAdmin = exports.ChatParticipantCreator = exports.ChatParticipant = exports.ChannelParticipant = exports.Chat = exports.BannedRights = exports.AdminRights = void 0;
// Tgsnake - Telegram MTProto framework developed based on gram.js.
// Copyright (C) 2022 Butthx <https://github.com/butthx>
//
// This file is part of Tgsnake
//
// Tgsnake is a free software : you can redistribute it and/or modify
//  it under the terms of the MIT License as published.
var AdminRights_1 = require("./AdminRights");
Object.defineProperty(exports, "AdminRights", { enumerable: true, get: function () { return AdminRights_1.AdminRights; } });
var BannedRight_1 = require("./BannedRight");
Object.defineProperty(exports, "BannedRights", { enumerable: true, get: function () { return BannedRight_1.BannedRights; } });
var Chat_1 = require("./Chat");
Object.defineProperty(exports, "Chat", { enumerable: true, get: function () { return Chat_1.Chat; } });
var ChatParticipants_1 = require("./ChatParticipants");
Object.defineProperty(exports, "ChannelParticipant", { enumerable: true, get: function () { return ChatParticipants_1.ChannelParticipant; } });
Object.defineProperty(exports, "ChatParticipant", { enumerable: true, get: function () { return ChatParticipants_1.ChatParticipant; } });
Object.defineProperty(exports, "ChatParticipantCreator", { enumerable: true, get: function () { return ChatParticipants_1.ChatParticipantCreator; } });
Object.defineProperty(exports, "ChatParticipantAdmin", { enumerable: true, get: function () { return ChatParticipants_1.ChatParticipantAdmin; } });
Object.defineProperty(exports, "ChatParticipantsForbidden", { enumerable: true, get: function () { return ChatParticipants_1.ChatParticipantsForbidden; } });
Object.defineProperty(exports, "ChatParticipants", { enumerable: true, get: function () { return ChatParticipants_1.ChatParticipants; } });
var CleanObject_1 = require("./CleanObject");
Object.defineProperty(exports, "Cleaning", { enumerable: true, get: function () { return CleanObject_1.Cleaning; } });
Object.defineProperty(exports, "betterConsoleLog", { enumerable: true, get: function () { return CleanObject_1.betterConsoleLog; } });
Object.defineProperty(exports, "toJSON", { enumerable: true, get: function () { return CleanObject_1.toJSON; } });
var ForwardMessage_1 = require("./ForwardMessage");
Object.defineProperty(exports, "ForwardMessage", { enumerable: true, get: function () { return ForwardMessage_1.ForwardMessage; } });
var From_1 = require("./From");
Object.defineProperty(exports, "From", { enumerable: true, get: function () { return From_1.From; } });
var Message_1 = require("./Message");
Object.defineProperty(exports, "Message", { enumerable: true, get: function () { return Message_1.Message; } });
var MessageAction_1 = require("./MessageAction");
Object.defineProperty(exports, "MessageAction", { enumerable: true, get: function () { return MessageAction_1.MessageAction; } });
var MigrateTo_1 = require("./MigrateTo");
Object.defineProperty(exports, "MigrateTo", { enumerable: true, get: function () { return MigrateTo_1.MigrateTo; } });
var Payment_1 = require("./Payment");
Object.defineProperty(exports, "PaymentRequestedInfo", { enumerable: true, get: function () { return Payment_1.PaymentRequestedInfo; } });
Object.defineProperty(exports, "PostAddress", { enumerable: true, get: function () { return Payment_1.PostAddress; } });
Object.defineProperty(exports, "PaymentCharge", { enumerable: true, get: function () { return Payment_1.PaymentCharge; } });
var Reactions_1 = require("./Reactions");
Object.defineProperty(exports, "Reactions", { enumerable: true, get: function () { return Reactions_1.Reactions; } });
var ReplyMarkup_1 = require("./ReplyMarkup");
Object.defineProperty(exports, "BuildReplyMarkup", { enumerable: true, get: function () { return ReplyMarkup_1.BuildReplyMarkup; } });
Object.defineProperty(exports, "convertReplyMarkup", { enumerable: true, get: function () { return ReplyMarkup_1.convertReplyMarkup; } });
var RestrictionReason_1 = require("./RestrictionReason");
Object.defineProperty(exports, "RestrictionReason", { enumerable: true, get: function () { return RestrictionReason_1.RestrictionReason; } });
var ToBigInt_1 = require("./ToBigInt");
Object.defineProperty(exports, "toBigInt", { enumerable: true, get: function () { return ToBigInt_1.toBigInt; } });
Object.defineProperty(exports, "toString", { enumerable: true, get: function () { return ToBigInt_1.toString; } });
Object.defineProperty(exports, "convertId", { enumerable: true, get: function () { return ToBigInt_1.convertId; } });
exports.Medias = __importStar(require("./Medias"));
